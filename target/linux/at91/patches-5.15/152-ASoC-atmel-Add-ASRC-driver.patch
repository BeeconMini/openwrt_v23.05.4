From a8c02b6c1781a55e695244b9e52767f8b966c37d Mon Sep 17 00:00:00 2001
From: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
Date: Tue, 18 May 2021 18:33:41 +0300
Subject: [PATCH 043/471] ASoC: atmel: Add ASRC driver

The Asynchronous Sample Rate Converter (ASRC) converts the sample rate of
an incoming audio frame without affecting quality. It supports input and
output sampling rates up to 192 kHz. It is made of 4 independent digital
signal processing modules (DSP). Each DSP can be configured with specific
input and output sampling frequencies and is associated to oneof the DMA
channels. Each DSP can process mono or stereo audio stream.
Data can be provided to the DSPs via up to four input channels and data
can be read from the DSPs via up to 4 output channels. A channel comprises
a holding register that can be accessed via software or via a channel of
the central DMA. The ASRC generates the trigger events for the central DMA.
Up to 8 channels are available.
Depending on the channel index and its configuration, a channel manages
from one up to eight audio frames. The ASRC can be configured to process
up to four stereo audio streams in a fully independent manner. Input/out
sampling frequencies differ for each DSP. The ASRC supports TDM audio
stream. ASRC is capable to concatenate/split audio streams while resampling
frequencies. The ASRC can be configured to resample and merge several
audio input sources of the same or of different sampling frequencies
carried by several DMA channels into a single output audio stream sampled
at a unique frequency and carried on a single DMA channel (TDM audio
stream creation from multiple sources). The ASRC can also split and
resample audio streams (e.g. TDM stream) carried on a single DMA channel
to multiple audio streams, each having the same or different resampling
frequencies.

Signed-off-by: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
---
 sound/soc/atmel/Kconfig         |   13 +
 sound/soc/atmel/Makefile        |    2 +
 sound/soc/atmel/mchp-asrc-dma.c |  957 ++++++++++++++
 sound/soc/atmel/mchp-asrc.c     | 2117 +++++++++++++++++++++++++++++++
 sound/soc/atmel/mchp-asrc.h     |   32 +
 5 files changed, 3121 insertions(+)
 create mode 100644 sound/soc/atmel/mchp-asrc-dma.c
 create mode 100644 sound/soc/atmel/mchp-asrc.c
 create mode 100644 sound/soc/atmel/mchp-asrc.h

diff --git a/sound/soc/atmel/Kconfig b/sound/soc/atmel/Kconfig
index 795c0b0b527a..037074d0c7d6 100644
--- a/sound/soc/atmel/Kconfig
+++ b/sound/soc/atmel/Kconfig
@@ -176,4 +176,17 @@ config SND_MCHP_SOC_PDMC
 	  2 data lines. The signal path includes an audio grade programmable
 	  decimation filter and outputs 24-bit audio words.
 
+config SND_MCHP_SOC_ASRC
+	tristate "Microchip ASoC driver for boards using ASRC"
+	depends on OF && (ARCH_AT91 || COMPILE_TEST)
+	select SND_SOC_GENERIC_DMAENGINE_PCM
+	select REGMAP_MMIO
+	help
+	  Say Y or M if you want to add support for Microchip ASRC ASoC
+	  driver on the following Microchip platforms:
+	  - sama7g5
+
+	  The Asynchronous Sample Rate Converter (ASRC) converts the sample
+	  rate of an incoming audio frame without affecting quality. It
+	  supports input and output sampling rates up to 192 kHz.
 endif
diff --git a/sound/soc/atmel/Makefile b/sound/soc/atmel/Makefile
index 043097a08ea8..051726808298 100644
--- a/sound/soc/atmel/Makefile
+++ b/sound/soc/atmel/Makefile
@@ -8,6 +8,7 @@ snd-soc-mchp-i2s-mcc-objs := mchp-i2s-mcc.o
 snd-soc-mchp-spdiftx-objs := mchp-spdiftx.o
 snd-soc-mchp-spdifrx-objs := mchp-spdifrx.o
 snd-soc-mchp-pdmc-objs := mchp-pdmc.o
+snd-soc-mchp-asrc-objs := mchp-asrc.o mchp-asrc-dma.o
 
 # pdc and dma need to both be built-in if any user of
 # ssc is built-in.
@@ -23,6 +24,7 @@ obj-$(CONFIG_SND_MCHP_SOC_I2S_MCC) += snd-soc-mchp-i2s-mcc.o
 obj-$(CONFIG_SND_MCHP_SOC_SPDIFTX) += snd-soc-mchp-spdiftx.o
 obj-$(CONFIG_SND_MCHP_SOC_SPDIFRX) += snd-soc-mchp-spdifrx.o
 obj-$(CONFIG_SND_MCHP_SOC_PDMC) += snd-soc-mchp-pdmc.o
+obj-$(CONFIG_SND_MCHP_SOC_ASRC) += snd-soc-mchp-asrc.o
 
 # AT91 Machine Support
 snd-soc-sam9g20-wm8731-objs := sam9g20_wm8731.o
diff --git a/sound/soc/atmel/mchp-asrc-dma.c b/sound/soc/atmel/mchp-asrc-dma.c
new file mode 100644
index 000000000000..1e6eb1d50bac
--- /dev/null
+++ b/sound/soc/atmel/mchp-asrc-dma.c
@@ -0,0 +1,957 @@
+// SPDX-License-Identifier: GPL-2.0
+// ASoC Platform (DMA) driver for Microchip ASRC
+//
+// Copyright (C) 2018-2022 Microchip Technology Inc. and its subsidiaries
+//
+// Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
+
+#include <linux/dma-mapping.h>
+#include <linux/module.h>
+#include <sound/dmaengine_pcm.h>
+#include <sound/pcm_params.h>
+
+#include "mchp-asrc.h"
+
+#define MCHP_ASRC_DMAENGINE_PCM_DRV_NAME  "mchp_snd_asrc_dmaengine_pcm"
+#define MCHP_ASRC_DMABUF_SIZE	(512 * 1024)
+
+struct mchp_asrc_dma_be_priv {
+	struct device				*dev;
+	struct of_phandle_args			*phandle;
+	struct snd_soc_dpcm			*dpcm;
+	struct dma_chan				*chan;
+	struct dma_async_tx_descriptor		*desc;
+	struct list_head			list;
+};
+
+struct mchp_asrc_dma_priv {
+	struct device				*dev;
+	struct list_head			dma_in_head;
+	struct list_head			dma_out_head;
+	unsigned int				refcount;
+	/* used for FE */
+	dma_cookie_t				cookie;
+	unsigned int				pos;
+	unsigned int				no_residue: 1;
+};
+
+static struct snd_pcm_hardware mchp_asrc_hw = {
+	.info = SNDRV_PCM_INFO_INTERLEAVED |
+		SNDRV_PCM_INFO_MMAP |
+		SNDRV_PCM_INFO_MMAP_VALID,
+	.buffer_bytes_max = MCHP_ASRC_DMABUF_SIZE,
+	.period_bytes_min = 256,
+	.periods_min = 2,
+	.periods_max = UINT_MAX,
+	.fifo_size = 0,
+};
+
+static inline struct mchp_asrc_dma_priv *
+mchp_asrc_substream_to_prtd(const struct snd_pcm_substream *substream)
+{
+	return substream->runtime->private_data;
+}
+
+static void
+snd_asrc_pcm_refine_runtime_hwparams(struct snd_pcm_substream *substream,
+				     struct snd_pcm_hardware *hw, struct dma_slave_caps *dma_caps)
+{
+	u32 addr_widths = BIT(DMA_SLAVE_BUSWIDTH_1_BYTE) |
+			  BIT(DMA_SLAVE_BUSWIDTH_2_BYTES) |
+			  BIT(DMA_SLAVE_BUSWIDTH_4_BYTES);
+	snd_pcm_format_t i;
+
+	if (dma_caps) {
+		if (dma_caps->cmd_pause && dma_caps->cmd_resume)
+			hw->info |= SNDRV_PCM_INFO_PAUSE | SNDRV_PCM_INFO_RESUME;
+		if (dma_caps->residue_granularity <= DMA_RESIDUE_GRANULARITY_SEGMENT)
+			hw->info |= SNDRV_PCM_INFO_BATCH;
+
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+			addr_widths = dma_caps->dst_addr_widths;
+		else
+			addr_widths = dma_caps->src_addr_widths;
+	}
+
+	pcm_for_each_format(i) {
+		int bits = snd_pcm_format_physical_width(i);
+
+		/*
+		 * Enable only samples with DMA supported physical
+		 * widths
+		 */
+		switch (bits) {
+		case 8:
+		case 16:
+		case 24:
+		case 32:
+		case 64:
+			if (addr_widths & (1 << (bits / 8)))
+				hw->formats |= pcm_format_to_bits(i);
+			break;
+		default:
+			/* Unsupported types */
+			break;
+		}
+	}
+}
+
+static int mchp_asrc_dma_open(struct snd_soc_component *component,
+			      struct snd_pcm_substream *substream)
+{
+	struct dma_slave_caps dma_caps;
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct device *dev = component->dev;
+	struct dma_chan *tmp_chan;
+	struct mchp_asrc_dma_priv *dma_priv;
+	bool is_playback = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
+	char tmp_str[4];
+	int ret;
+	int i;
+
+	if (runtime->private_data) {
+		dma_priv = runtime->private_data;
+		dma_priv->refcount++;
+		dev_dbg(dev, "%s(): DMA private data already allocated\n", __func__);
+		return 0;
+	}
+
+	dma_priv = kzalloc(sizeof(*dma_priv), GFP_KERNEL);
+	if (!dma_priv)
+		return -ENOMEM;
+	dma_priv->dev = dev;
+	INIT_LIST_HEAD(&dma_priv->dma_in_head);
+	INIT_LIST_HEAD(&dma_priv->dma_out_head);
+	dma_priv->refcount++;
+	runtime->private_data = dma_priv;
+
+	ret = snd_pcm_hw_constraint_integer(substream->runtime, SNDRV_PCM_HW_PARAM_PERIODS);
+	if (ret < 0) {
+		dev_err(dev, "snd_pcm_hw_constraint_integer() failed for HW_PARAM_PERIODS: %d\n",
+			ret);
+		goto __out_data_free;
+	}
+
+	/* since we are not preallocating the DMA channels, we use a
+	 * dummy DMA channel, just to get the capabilities
+	 */
+	for (i = 0; i < MCHP_ASRC_NB_STEREO_CH; i++) {
+		sprintf(tmp_str, "%cx%d",  is_playback ? 't' : 'r', i);
+
+		tmp_chan = dma_request_chan(dev, tmp_str);
+		if (!IS_ERR(tmp_chan))
+			break;
+	}
+	if (i == MCHP_ASRC_NB_STEREO_CH) {
+		dev_err(dev, "no free DMA %s channels\n", is_playback ? "tx" : "rx");
+		ret = -EINVAL;
+		goto __out_data_free;
+	}
+
+	mchp_asrc_hw.period_bytes_max = dma_get_max_seg_size(tmp_chan->device->dev);
+	ret = dma_get_slave_caps(tmp_chan, &dma_caps);
+	if (ret == 0) {
+		dma_priv->no_residue = dma_caps.residue_granularity ==
+			DMA_RESIDUE_GRANULARITY_DESCRIPTOR;
+
+		/* Refine mchp_asrc_hw according to caps of DMA */
+		snd_asrc_pcm_refine_runtime_hwparams(substream, &mchp_asrc_hw, &dma_caps);
+	} else {
+		snd_asrc_pcm_refine_runtime_hwparams(substream, &mchp_asrc_hw, NULL);
+	}
+
+	ret = snd_soc_set_runtime_hwparams(substream, &mchp_asrc_hw);
+	if (ret < 0) {
+		dev_err(dev, "runtime_hwparams() failed: %d\n", ret);
+		goto __out_release_chan;
+	}
+
+	dma_release_channel(tmp_chan);
+
+	return 0;
+
+__out_release_chan:
+	dma_release_channel(tmp_chan);
+__out_data_free:
+	dma_priv->refcount--;
+	if (!dma_priv->refcount) {
+		kfree(dma_priv);
+		runtime->private_data = NULL;
+	}
+
+	return ret;
+}
+
+static int mchp_asrc_dma_close(struct snd_soc_component *component,
+			       struct snd_pcm_substream *substream)
+{
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct mchp_asrc_dma_priv *dma_priv = runtime->private_data;
+
+	dma_priv->refcount--;
+	if (!dma_priv->refcount) {
+		kfree(dma_priv);
+		runtime->private_data = NULL;
+	}
+
+	return 0;
+}
+
+static void mchp_asrc_start_handle(unsigned long data)
+{
+	struct mchp_asrc_dma_priv *dma_priv = (struct mchp_asrc_dma_priv *)data;
+	struct mchp_asrc_dma_be_priv *dma_be_priv;
+
+	list_for_each_entry(dma_be_priv, &dma_priv->dma_in_head, list) {
+		if (unlikely(!dma_be_priv->desc)) {
+			dev_err(dma_priv->dev, "in BE %s DMA descriptor not initialized\n",
+				dma_be_priv->phandle ? dma_be_priv->phandle->np->name :
+						       "front-end");
+			return;
+		}
+		dev_dbg(dma_priv->dev, "%s() DMA: in BE channel %s for %s\n", __func__,
+			dma_be_priv->desc->chan->name,
+			dma_be_priv->phandle ? dma_be_priv->phandle->np->name : "front-end");
+	}
+	list_for_each_entry(dma_be_priv, &dma_priv->dma_out_head, list) {
+		if (unlikely(!dma_be_priv->desc)) {
+			dev_err(dma_priv->dev, "out BE %s DMA descriptor not initialized\n",
+				dma_be_priv->phandle ? dma_be_priv->phandle->np->name :
+						       "front-end");
+			return;
+		}
+		dev_dbg(dma_priv->dev, "%s() DMA: out BE channel %s for %s\n", __func__,
+			dma_be_priv->desc->chan->name,
+			dma_be_priv->phandle ? dma_be_priv->phandle->np->name : "front-end");
+	}
+
+	/* start transmit channel DMAs */
+	dev_info(dma_priv->dev, "ASRC IN AIF(s):\n");
+	list_for_each_entry(dma_be_priv, &dma_priv->dma_in_head, list) {
+		if (!dma_be_priv->phandle) {
+			dma_priv->cookie = dmaengine_submit(dma_be_priv->desc);
+			dev_info(dma_priv->dev, "\tfront-end\n");
+		} else {
+			dmaengine_submit(dma_be_priv->desc);
+			dev_info(dma_priv->dev, "\t%s, %d channels\n",
+				 dma_be_priv->phandle->np->full_name,
+				 params_channels(&dma_be_priv->dpcm->hw_params));
+		}
+	}
+	list_for_each_entry(dma_be_priv, &dma_priv->dma_in_head, list)
+		dma_async_issue_pending(dma_be_priv->desc->chan);
+
+	/* start receive channel DMAs */
+	dev_info(dma_priv->dev, "ASRC OUT AIF(s):\n");
+	list_for_each_entry(dma_be_priv, &dma_priv->dma_out_head, list) {
+		if (!dma_be_priv->phandle) {
+			dma_priv->cookie = dmaengine_submit(dma_be_priv->desc);
+			dev_info(dma_priv->dev, "\tfront-end\n");
+		} else {
+			dmaengine_submit(dma_be_priv->desc);
+			dev_info(dma_priv->dev, "\t%s, %d channels\n",
+				 dma_be_priv->phandle->np->full_name,
+				 params_channels(&dma_be_priv->dpcm->hw_params));
+		}
+	}
+	list_for_each_entry(dma_be_priv, &dma_priv->dma_out_head, list)
+		dma_async_issue_pending(dma_be_priv->desc->chan);
+}
+
+static int mchp_asrc_dmaengine_pcm_prepare_slave_config(struct snd_pcm_substream *substream,
+							struct snd_pcm_hw_params *params,
+							struct snd_dmaengine_dai_dma_data *dma_data,
+							struct dma_slave_config *slave_config)
+{
+	int ret;
+
+	ret = snd_hwparams_to_dma_slave_config(substream, params, slave_config);
+	if (ret)
+		return ret;
+
+	snd_dmaengine_pcm_set_config_from_dai_data(substream, dma_data, slave_config);
+
+	return 0;
+}
+
+static int
+mchp_asrc_be_dmaengine_slave_config(struct mchp_asrc_dmaengine_dai_dma *dma,
+				    struct mchp_asrc_dma_be_priv *dma_be_priv,
+				    int is_playback)
+{
+	struct dma_slave_config config_be = {0};
+	struct snd_soc_dpcm *dpcm = dma_be_priv->dpcm;
+	struct snd_soc_pcm_runtime *be = dpcm->be;
+	struct snd_soc_dai *dai = asoc_rtd_to_cpu(be, 0);
+	struct device *dev = dma_be_priv->dev;
+	struct mchp_asrc_dmaengine_be_dma *dma_be;
+	struct snd_dmaengine_dai_dma_data *dma_data_be;
+	struct list_head *dmaengine_list;
+	enum dma_slave_buswidth buswidth;
+	int ret;
+	int bits_be;
+
+	dmaengine_list = is_playback ? &dma->dma_out_list : &dma->dma_in_list;
+	list_for_each_entry(dma_be, dmaengine_list, list) {
+		if (dma_be->phandle && dma_be->phandle->np == dai->dev->of_node) {
+			dev_dbg(dev, "found DMA data %s\n", dma_be->phandle->np->name);
+			break;
+		}
+	}
+	if (list_entry_is_head(dma_be, dmaengine_list, list)) {
+		dev_err(dev, "DMA data not found for BE %s\n", dai->name);
+		return -EINVAL;
+	}
+
+	dma_be_priv->phandle = dma_be->phandle;
+
+	dma_data_be = &dma_be->dma_data;
+	dma_be_priv->chan = dma_request_slave_channel(dev, dma_data_be->chan_name);
+	if (!dma_be_priv->chan) {
+		dev_err(dai->dev, "failed to request DMA channel %s for BE\n",
+			dma_data_be->chan_name);
+		ret = -EBUSY;
+		goto __cleanup_phandle;
+	}
+
+	bits_be = params_physical_width(&dpcm->hw_params);
+	if (bits_be < 8 || bits_be > 64) {
+		dev_err(dai->dev, "invalid physical width %d for BE %s\n", bits_be, dai->name);
+		ret = -EINVAL;
+		goto __cleanup_chan;
+	}
+	if (bits_be == 8)
+		buswidth = DMA_SLAVE_BUSWIDTH_1_BYTE;
+	else if (bits_be == 16)
+		buswidth = DMA_SLAVE_BUSWIDTH_2_BYTES;
+	else if (bits_be == 24)
+		buswidth = DMA_SLAVE_BUSWIDTH_3_BYTES;
+	else if (bits_be <= 32)
+		buswidth = DMA_SLAVE_BUSWIDTH_4_BYTES;
+	else
+		buswidth = DMA_SLAVE_BUSWIDTH_8_BYTES;
+
+	if (is_playback) {
+		config_be.direction = DMA_DEV_TO_MEM;
+		config_be.src_addr_width = buswidth;
+		config_be.src_maxburst = dma_data_be->maxburst;
+		config_be.src_addr = dma_data_be->addr;
+	} else {
+		config_be.direction = DMA_MEM_TO_DEV;
+		config_be.dst_addr_width = buswidth;
+		config_be.dst_maxburst = dma_data_be->maxburst;
+		config_be.dst_addr = dma_data_be->addr;
+	}
+	config_be.device_fc = false;
+
+	dev_dbg(dev,
+		"%s() AIF %s dir %s, src addr %#x, dst addr: %#x, src_addr_width %d, dst_addr_width %d, src maxburst %u, dst maxburst %u\n",
+		__func__, dai->name,
+		config_be.direction == DMA_MEM_TO_DEV ? "DMA_MEM_TO_DEV" :
+							"DMA_DEV_TO_MEM",
+		config_be.src_addr, config_be.dst_addr,
+		config_be.src_addr_width, config_be.dst_addr_width,
+		config_be.src_maxburst, config_be.dst_maxburst);
+
+	ret = dmaengine_slave_config(dma_be_priv->chan, &config_be);
+	if (ret) {
+		dev_err(dev, "failed to config DMA channel for BE %s: %d\n", dai->name, ret);
+		goto __cleanup_chan;
+	}
+
+	return 0;
+
+__cleanup_chan:
+	dma_release_channel(dma_be_priv->chan);
+__cleanup_phandle:
+	dma_be_priv->phandle = NULL;
+	return ret;
+}
+
+static int mchp_asrc_dma_hw_params(struct snd_soc_component *component,
+				   struct snd_pcm_substream *substream,
+				   struct snd_pcm_hw_params *params)
+{
+	struct dma_slave_config config_fe = {0};
+	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
+	struct mchp_asrc_dma_priv *priv = mchp_asrc_substream_to_prtd(substream);
+	struct snd_soc_dpcm *dpcm;
+	struct device *dev = component->dev;
+	struct mchp_asrc_dmaengine_dai_dma *dma;
+	struct snd_dmaengine_dai_dma_data *dma_data_fe = NULL;
+	struct snd_pcm_substream *substream_be;
+	struct mchp_asrc_dma_be_priv *dma_be_priv, *tmp, *dma_fe_priv;
+	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, 0);
+	struct mchp_asrc_dmaengine_be_dma *dma_be;
+	struct list_head *dma_be_list;
+	struct list_head *dma_be_head;
+	int ret;
+	bool is_playback = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
+
+	/* save BEs for this substream */
+	for_each_dpcm_be(rtd, substream->stream, dpcm) {
+		struct snd_soc_pcm_runtime *be = dpcm->be;
+
+		if (dpcm->fe != rtd)
+			continue;
+
+		substream_be = snd_soc_dpcm_get_substream(be, substream->stream);
+		if (!substream_be)
+			continue;
+
+		dma_be_priv = kzalloc(sizeof(*dma_be_priv), GFP_KERNEL);
+		if (!dma_be_priv) {
+			ret = -ENOMEM;
+			goto __cleanup_dma_free;
+		}
+		dma_be_priv->dev = component->dev;
+		dma_be_priv->dpcm = dpcm;
+
+		if (is_playback)
+			list_add_tail(&dma_be_priv->list, &priv->dma_out_head);
+		else
+			list_add_tail(&dma_be_priv->list, &priv->dma_in_head);
+		dev_dbg(dev, "%s: add %s %s\n", __func__, is_playback ? "OUT" : "IN",
+			asoc_rtd_to_cpu(be, 0)->name);
+	}
+
+	dma = snd_soc_dai_get_dma_data(cpu_dai, substream);
+	if (!dma) {
+		if (params) {
+			dev_err(rtd->dev, "platform data not found for FE %s\n", cpu_dai->name);
+			ret = -EINVAL;
+			goto __cleanup_dma_free;
+		}
+		dev_dbg(rtd->dev, "platform data not set; probably half stream called: stream %s\n",
+			is_playback ? "playback" : "capture");
+		return 0;
+	}
+
+	/* start DMA config; start with current stream DMAs */
+	dma_be_head = is_playback ? &priv->dma_out_head : &priv->dma_in_head;
+	list_for_each_entry(dma_be_priv, dma_be_head, list) {
+		ret = mchp_asrc_be_dmaengine_slave_config(dma, dma_be_priv, is_playback);
+		if (ret < 0)
+			goto __cleanup_dma_be;
+	}
+
+	/* configure DMAs for the 'other' substream */
+	if (!params) {
+		dma_be_head = is_playback ? &priv->dma_in_head : &priv->dma_out_head;
+		list_for_each_entry(dma_be_priv, dma_be_head, list) {
+			ret = mchp_asrc_be_dmaengine_slave_config(dma, dma_be_priv, !is_playback);
+			if (ret < 0)
+				goto __cleanup_dma_rev;
+		}
+
+		return 0;
+	}
+
+	/* set FE */
+	dma_be_list = is_playback ? &dma->dma_in_list : &dma->dma_out_list;
+
+	list_for_each_entry(dma_be, dma_be_list, list) {
+		if (!dma_be->phandle) {
+			dma_data_fe = &dma_be->dma_data;
+			break;
+		}
+	}
+	if (!dma_data_fe) {
+		dev_err(dev, "FE DMA data not found\n");
+		ret = -EINVAL;
+		goto __cleanup_dma_rev;
+	}
+
+	dma_fe_priv = kzalloc(sizeof(*dma_fe_priv), GFP_KERNEL);
+	if (!dma_fe_priv) {
+		ret = -ENOMEM;
+		goto __cleanup_dma_rev;
+	}
+
+	dma_fe_priv->chan = dma_request_slave_channel(dev, dma_data_fe->chan_name);
+	if (!dma_fe_priv->chan) {
+		dev_err(dev, "failed to request DMA channel %s for FE %s\n",
+			dma_data_fe->chan_name, cpu_dai->name);
+		ret = -EINVAL;
+		goto __cleanup_free_fe;
+	}
+
+	ret = mchp_asrc_dmaengine_pcm_prepare_slave_config(substream, params, dma_data_fe,
+							   &config_fe);
+	if (ret) {
+		dev_err(dev, "failed to prepare DMA config for FE %s\n", cpu_dai->name);
+		goto __cleanup_dma_fe;
+	}
+
+	dev_dbg(dev,
+		"%s() config %s: dir %s, src addr %#x, dst addr %#x, src_addr_width %d, dst_addr_width %d, src maxburst %u, dst maxburst %u\n",
+		__func__, cpu_dai->name,
+		config_fe.direction == DMA_MEM_TO_DEV ? "MEM_TO_DEV" :
+							"DEV_TO_MEM",
+		config_fe.src_addr, config_fe.dst_addr,
+		config_fe.src_addr_width, config_fe.dst_addr_width,
+		config_fe.src_maxburst, config_fe.dst_maxburst);
+
+	ret = dmaengine_slave_config(dma_fe_priv->chan, &config_fe);
+	if (ret) {
+		dev_err(dev, "failed to config DMA channel for FE %s\n", cpu_dai->name);
+		goto __cleanup_dma_fe;
+	}
+
+	/* on playback, FE is in AIF and on capture FE is out AIF */
+	if (is_playback)
+		list_add_tail(&dma_fe_priv->list, &priv->dma_in_head);
+	else
+		list_add_tail(&dma_fe_priv->list, &priv->dma_out_head);
+
+	dev_dbg(component->dev, "%s: added %s %s\n", __func__, is_playback ? "IN" : "OUT",
+		cpu_dai->name);
+	ret = snd_dma_alloc_pages(SNDRV_DMA_TYPE_DEV_IRAM, dev, params_buffer_bytes(params),
+				  &substream->dma_buffer);
+	if (ret < 0)
+		goto __cleanup_dma_fe_list;
+
+	snd_pcm_set_runtime_buffer(substream, &substream->dma_buffer);
+
+	return 0;
+
+__cleanup_dma_fe_list:
+	list_del(&dma_fe_priv->list);
+__cleanup_dma_fe:
+	dma_release_channel(dma_fe_priv->chan);
+	dma_fe_priv->chan = NULL;
+__cleanup_free_fe:
+	kfree(dma_fe_priv);
+__cleanup_dma_rev:
+	if (!params) {
+		dma_be_head = is_playback ? &priv->dma_in_head : &priv->dma_out_head;
+		list_for_each_entry(dma_be_priv, dma_be_head, list) {
+			if (dma_be_priv->chan) {
+				dma_release_channel(dma_be_priv->chan);
+				dma_be_priv->chan = NULL;
+			}
+		}
+	}
+__cleanup_dma_be:
+	dma_be_head = is_playback ? &priv->dma_out_head : &priv->dma_in_head;
+	list_for_each_entry(dma_be_priv, dma_be_head, list) {
+		if (dma_be_priv->chan) {
+			dma_release_channel(dma_be_priv->chan);
+			dma_be_priv->chan = NULL;
+		}
+	}
+__cleanup_dma_free:
+	dma_be_head = is_playback ? &priv->dma_out_head : &priv->dma_in_head;
+	list_for_each_entry_safe(dma_be_priv, tmp, dma_be_head, list) {
+		list_del(&dma_be_priv->list);
+		kfree(dma_be_priv);
+	}
+
+	return ret;
+}
+
+static int mchp_asrc_dma_hw_free(struct snd_soc_component *component,
+				 struct snd_pcm_substream *substream)
+{
+	struct mchp_asrc_dma_priv *priv = mchp_asrc_substream_to_prtd(substream);
+	struct mchp_asrc_dma_be_priv *dma_be_priv, *tmp;
+
+	if (substream->dma_buffer.area) {
+		snd_dma_free_pages(&substream->dma_buffer);
+		substream->dma_buffer.area = NULL;
+		snd_pcm_set_runtime_buffer(substream, NULL);
+	}
+
+	list_for_each_entry(dma_be_priv, &priv->dma_in_head, list) {
+		if (dma_be_priv->chan)
+			dmaengine_synchronize(dma_be_priv->chan);
+	}
+
+	list_for_each_entry(dma_be_priv, &priv->dma_out_head, list) {
+		if (dma_be_priv->chan)
+			dmaengine_synchronize(dma_be_priv->chan);
+	}
+
+	list_for_each_entry_safe(dma_be_priv, tmp, &priv->dma_in_head, list) {
+		if (dma_be_priv->chan)
+			dma_release_channel(dma_be_priv->chan);
+		dma_be_priv->chan = NULL;
+		list_del(&dma_be_priv->list);
+		kfree(dma_be_priv);
+	}
+
+	list_for_each_entry_safe(dma_be_priv, tmp, &priv->dma_out_head, list) {
+		if (dma_be_priv->chan)
+			dma_release_channel(dma_be_priv->chan);
+		dma_be_priv->chan = NULL;
+		list_del(&dma_be_priv->list);
+		kfree(dma_be_priv);
+	}
+
+	return 0;
+}
+
+static void mchp_asrc_pcm_dma_complete(void *arg)
+{
+	struct snd_pcm_substream *substream = arg;
+	struct mchp_asrc_dma_priv *priv = mchp_asrc_substream_to_prtd(substream);
+
+	priv->pos += snd_pcm_lib_period_bytes(substream);
+	if (priv->pos >= snd_pcm_lib_buffer_bytes(substream))
+		priv->pos = 0;
+	snd_pcm_period_elapsed(substream);
+}
+
+static int mchp_asrc_dma_prepare(struct snd_soc_component *component,
+				 struct snd_pcm_substream *subs, struct mchp_asrc_dma_priv *priv)
+{
+	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(subs);
+	struct device *dev = component->dev;
+	unsigned long flags = DMA_CTRL_ACK;
+	enum dma_transfer_direction dir;
+	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, 0);
+	struct mchp_asrc_dmaengine_dai_dma *dma;
+	struct mchp_asrc_dma_be_priv *dma_fe_priv = NULL, *dma_be_priv;
+	struct dma_async_tx_descriptor *desc;
+	bool is_playback = subs->stream == SNDRV_PCM_STREAM_PLAYBACK;
+	struct list_head *dma_be_head;
+	int stream;
+
+	dma = snd_soc_dai_get_dma_data(cpu_dai, subs);
+	if (!dma) {
+		dev_dbg(rtd->dev, "platform data not found for FE %s\n", cpu_dai->name);
+		return 0;
+	}
+
+	if (is_playback) {
+		dma_be_head = &priv->dma_out_head;
+		stream = SNDRV_PCM_STREAM_PLAYBACK;
+	} else {
+		dma_be_head = &priv->dma_in_head;
+		stream = SNDRV_PCM_STREAM_CAPTURE;
+	}
+	list_for_each_entry(dma_be_priv, dma_be_head, list) {
+		struct snd_soc_dpcm *dpcm;
+		struct snd_soc_pcm_runtime *be;
+		struct snd_soc_dai *dai;
+		struct snd_pcm_substream *subs_be;
+		struct snd_pcm_runtime *rtm_be;
+
+		if (!dma_be_priv->phandle) {
+			if (dma_fe_priv) {
+				dev_err(dev, "found multiple AIFs without DMA data\n");
+				return -EINVAL;
+			}
+			/* private DMA data for FE */
+			dma_fe_priv = dma_be_priv;
+			continue;
+		}
+
+		dpcm = dma_be_priv->dpcm;
+		be = dpcm->be;
+		dai = asoc_rtd_to_cpu(be, 0);
+
+		dev_dbg(dev, "%s() OUT BE DAI %s: rate=%u format=%#x width=%u channels=%u\n",
+			__func__, dai->name, params_rate(&dpcm->hw_params),
+			params_format(&dpcm->hw_params), params_width(&dpcm->hw_params),
+			params_channels(&dpcm->hw_params));
+
+		if (!dma_be_priv->chan) {
+			dev_err(dev, "DMA channel not found for BE %s\n", dai->name);
+			return -EINVAL;
+		}
+
+		subs_be = snd_soc_dpcm_get_substream(be, stream);
+		rtm_be = subs_be->runtime;
+
+		dev_dbg(dev,
+			"%s() BE buffer_size(periods) %ld, buffer_size(bytes) %u period_size(frames) %ld period_size(bytes) %u\n",
+			__func__,
+			rtm_be->buffer_size, snd_pcm_lib_buffer_bytes(subs_be),
+			rtm_be->period_size, snd_pcm_lib_period_bytes(subs_be));
+
+		desc = dmaengine_prep_dma_cyclic(dma_be_priv->chan, rtm_be->dma_addr,
+						 snd_pcm_lib_buffer_bytes(subs_be),
+						 snd_pcm_lib_period_bytes(subs_be),
+						 is_playback ? DMA_DEV_TO_MEM :
+							       DMA_MEM_TO_DEV, DMA_CTRL_ACK);
+		if (!desc) {
+			dev_err(dev, "failed to prepare client DMA for BE %s\n", dai->name);
+			return -ENOMEM;
+		}
+		dma_be_priv->desc = desc;
+	}
+
+	if (is_playback) {
+		dma_be_head = &priv->dma_in_head;
+		stream = SNDRV_PCM_STREAM_CAPTURE;
+	} else {
+		dma_be_head = &priv->dma_out_head;
+		stream = SNDRV_PCM_STREAM_PLAYBACK;
+	}
+
+	/* get FE DMA data, if available */
+	list_for_each_entry(dma_be_priv, dma_be_head, list) {
+		struct snd_soc_dpcm *dpcm;
+		struct snd_soc_pcm_runtime *be;
+		struct snd_soc_dai *dai;
+		struct snd_pcm_substream *subs_be;
+		struct snd_pcm_runtime *rtm_be;
+
+		if (!dma_be_priv->phandle) {
+			if (dma_fe_priv) {
+				dev_err(dev, "found multiple AIFs without DMA data\n");
+				return -EINVAL;
+			}
+			/* private DMA data for FE */
+			dma_fe_priv = dma_be_priv;
+			continue;
+		}
+
+		dpcm = dma_be_priv->dpcm;
+		be = dpcm->be;
+		dai = asoc_rtd_to_cpu(be, 0);
+
+		dev_dbg(dev, "%s() IN BE DAI %s: rate=%u format=%#x width=%u channels=%u\n",
+			__func__, dai->name, params_rate(&dpcm->hw_params),
+			params_format(&dpcm->hw_params), params_width(&dpcm->hw_params),
+			params_channels(&dpcm->hw_params));
+
+		if (!dma_be_priv->chan) {
+			dev_err(dev, "DMA channel not found for BE %s\n", dai->name);
+			return -EINVAL;
+		}
+
+		subs_be = snd_soc_dpcm_get_substream(be, stream);
+		rtm_be = subs_be->runtime;
+
+		dev_dbg(dev,
+			"%s() BE buffer_size(periods) %ld, buffer_size(bytes) %u period_size(frames) %ld period_size(bytes) %u\n",
+			__func__,
+			rtm_be->buffer_size, snd_pcm_lib_buffer_bytes(subs_be),
+			rtm_be->period_size, snd_pcm_lib_period_bytes(subs_be));
+
+		desc = dmaengine_prep_dma_cyclic(dma_be_priv->chan, rtm_be->dma_addr,
+						 snd_pcm_lib_buffer_bytes(subs_be),
+						 snd_pcm_lib_period_bytes(subs_be),
+						 !is_playback ? DMA_DEV_TO_MEM :
+							       DMA_MEM_TO_DEV, DMA_CTRL_ACK);
+		if (!desc) {
+			dev_err(dev, "failed to prepare client DMA for BE %s\n", dai->name);
+			return -ENOMEM;
+		}
+		dma_be_priv->desc = desc;
+	}
+
+	/* FE present, initialize the DMA transfer to user space */
+	if (dma_fe_priv) {
+		if (!subs->runtime->no_period_wakeup)
+			flags |= DMA_PREP_INTERRUPT;
+
+		priv->pos = 0;
+		dir = snd_pcm_substream_to_dma_direction(subs);
+		desc = dmaengine_prep_dma_cyclic(dma_fe_priv->chan, subs->runtime->dma_addr,
+						 snd_pcm_lib_buffer_bytes(subs),
+						 snd_pcm_lib_period_bytes(subs), dir, flags);
+		if (!desc) {
+			dev_err(dev, "failed to prepare client DMA for FE %s\n", cpu_dai->name);
+			return -ENOMEM;
+		}
+		dma_fe_priv->desc = desc;
+
+		dev_dbg(dev, "%s() FE buffer_size %ld, period_size %ld\n", __func__,
+			subs->runtime->buffer_size, subs->runtime->period_size);
+		dma_fe_priv->desc->callback = mchp_asrc_pcm_dma_complete;
+		dma_fe_priv->desc->callback_param = subs;
+	} else {
+		dev_dbg(dev, "%s() FE DMA not found\n", __func__);
+	}
+
+	dev_dbg(dev, "%s: initializing start_handle tasklet\n", __func__);
+	tasklet_init(&dma->start_handle, &mchp_asrc_start_handle, (unsigned long)priv);
+
+	return 0;
+}
+
+static void mchp_asrc_dmaengine_resume(struct mchp_asrc_dma_priv *priv)
+{
+	struct mchp_asrc_dma_be_priv *dma_be_priv;
+
+	list_for_each_entry(dma_be_priv, &priv->dma_in_head, list) {
+		if (dma_be_priv->chan)
+			dmaengine_resume(dma_be_priv->chan);
+	}
+	list_for_each_entry(dma_be_priv, &priv->dma_out_head, list) {
+		if (dma_be_priv->chan)
+			dmaengine_resume(dma_be_priv->chan);
+	}
+}
+
+static void mchp_asrc_dmaengine_pause(struct mchp_asrc_dma_priv *priv)
+{
+	struct mchp_asrc_dma_be_priv *dma_be_priv;
+
+	list_for_each_entry(dma_be_priv, &priv->dma_in_head, list) {
+		if (dma_be_priv->chan)
+			dmaengine_pause(dma_be_priv->chan);
+	}
+	list_for_each_entry(dma_be_priv, &priv->dma_out_head, list) {
+		if (dma_be_priv->chan)
+			dmaengine_pause(dma_be_priv->chan);
+	}
+}
+
+static void mchp_asrc_dmaengine_term(struct mchp_asrc_dma_priv *priv)
+{
+	struct mchp_asrc_dma_be_priv *dma_be_priv;
+
+	list_for_each_entry(dma_be_priv, &priv->dma_in_head, list) {
+		if (dma_be_priv->chan)
+			dmaengine_terminate_async(dma_be_priv->chan);
+		else
+			dev_dbg(priv->dev, "no DMA channel in IN queue\n");
+	}
+	list_for_each_entry(dma_be_priv, &priv->dma_out_head, list) {
+		if (dma_be_priv->chan)
+			dmaengine_terminate_async(dma_be_priv->chan);
+		else
+			dev_dbg(priv->dev, "no DMA channel in OUT queue\n");
+	}
+}
+
+static int mchp_asrc_dma_trigger(struct snd_soc_component *component,
+				 struct snd_pcm_substream *substream, int cmd)
+{
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct mchp_asrc_dma_priv *priv = mchp_asrc_substream_to_prtd(substream);
+	int ret;
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+		ret = mchp_asrc_dma_prepare(component, substream, priv);
+		if (ret)
+			return ret;
+		break;
+	case SNDRV_PCM_TRIGGER_RESUME:
+		fallthrough;
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		mchp_asrc_dmaengine_resume(priv);
+		break;
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+		if (runtime->info & SNDRV_PCM_INFO_PAUSE)
+			mchp_asrc_dmaengine_pause(priv);
+		else
+			mchp_asrc_dmaengine_term(priv);
+		break;
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		mchp_asrc_dmaengine_pause(priv);
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+		mchp_asrc_dmaengine_term(priv);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static snd_pcm_uframes_t
+mchp_asrc_dma_pcm_pointer(struct snd_soc_component *component, struct snd_pcm_substream *substream)
+{
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct mchp_asrc_dma_priv *priv = mchp_asrc_substream_to_prtd(substream);
+	struct mchp_asrc_dma_be_priv *dma_fe_priv;
+	struct dma_tx_state state;
+	enum dma_status status;
+	unsigned int buf_size;
+	unsigned int pos = 0;
+	bool is_playback = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
+	struct list_head *dma_fe_head = is_playback ? &priv->dma_in_head : &priv->dma_out_head;
+
+	priv = mchp_asrc_substream_to_prtd(substream);
+	if (priv->no_residue)
+		return bytes_to_frames(runtime, priv->pos);
+
+	list_for_each_entry(dma_fe_priv, dma_fe_head, list) {
+		if (!dma_fe_priv->phandle)
+			break;
+	}
+	if (list_entry_is_head(dma_fe_priv, dma_fe_head, list)) {
+		dev_err(priv->dev, "FE DMA phandle not found\n");
+		return 0;
+	}
+	status = dmaengine_tx_status(dma_fe_priv->chan, priv->cookie, &state);
+	if (status == DMA_IN_PROGRESS || status == DMA_PAUSED) {
+		buf_size = snd_pcm_lib_buffer_bytes(substream);
+		if (state.residue > 0 && state.residue <= buf_size)
+			pos = buf_size - state.residue;
+
+		runtime->delay = bytes_to_frames(runtime, state.in_flight_bytes);
+	}
+
+	return bytes_to_frames(substream->runtime, pos);
+}
+
+static int mchp_asrc_dma_pcm_new(struct snd_soc_component *component,
+				 struct snd_soc_pcm_runtime *rtd)
+{
+	struct snd_pcm_substream *substream;
+	struct snd_pcm *pcm = rtd->pcm;
+	int i;
+
+	for (i = SNDRV_PCM_STREAM_PLAYBACK; i <= SNDRV_PCM_STREAM_LAST; i++) {
+		substream = pcm->streams[i].substream;
+		if (!substream)
+			continue;
+
+		substream->dma_buffer.bytes = 0;
+		substream->dma_buffer.area = NULL;
+		substream->dma_buffer.addr = 0;
+		substream->dma_buffer.private_data = NULL;
+	}
+
+	return 0;
+}
+
+static void mchp_asrc_dma_pcm_free(struct snd_soc_component *component,
+				   struct snd_pcm *pcm)
+{
+	struct snd_pcm_substream *substream;
+	int i;
+
+	for (i = SNDRV_PCM_STREAM_PLAYBACK; i <= SNDRV_PCM_STREAM_LAST; i++) {
+		substream = pcm->streams[i].substream;
+		if (!substream)
+			continue;
+
+		substream->dma_buffer.area = NULL;
+		substream->dma_buffer.addr = 0;
+	}
+}
+
+const struct snd_soc_component_driver mchp_asrc_platform = {
+	.name		= MCHP_ASRC_DMAENGINE_PCM_DRV_NAME,
+	.pcm_construct	= mchp_asrc_dma_pcm_new,
+	.pcm_destruct	= mchp_asrc_dma_pcm_free,
+	.hw_params	= mchp_asrc_dma_hw_params,
+	.hw_free	= mchp_asrc_dma_hw_free,
+	.trigger	= mchp_asrc_dma_trigger,
+	.open		= mchp_asrc_dma_open,
+	.close		= mchp_asrc_dma_close,
+	.pointer	= mchp_asrc_dma_pcm_pointer,
+};
+EXPORT_SYMBOL_GPL(mchp_asrc_platform);
+
+int mchp_asrc_pcm_register(struct device *dev)
+{
+	int err;
+
+	err = devm_snd_soc_register_component(dev, &mchp_asrc_platform, NULL, 0);
+	if (err) {
+		dev_err(dev, "failed to register ASoC platform for ASRC\n");
+		return err;
+	}
+
+	return 0;
+}
diff --git a/sound/soc/atmel/mchp-asrc.c b/sound/soc/atmel/mchp-asrc.c
new file mode 100644
index 000000000000..df05c622ec43
--- /dev/null
+++ b/sound/soc/atmel/mchp-asrc.c
@@ -0,0 +1,2117 @@
+// SPDX-License-Identifier: GPL-2.0
+// ASoC driver for Microchip ASRC
+//
+// Copyright (C) 2018-2022 Microchip Technology Inc. and its subsidiaries
+//
+// Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/lcm.h>
+#include <linux/list.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/initval.h>
+#include <sound/soc.h>
+#include <sound/dmaengine_pcm.h>
+
+#include "mchp-asrc.h"
+
+/*
+ * ---- ASRC Controller Register map ----
+ */
+#define MCHP_ASRC_CR			0x0000	/* Control Register */
+#define MCHP_ASRC_MR			0x0004	/* Mode Register */
+#define MCHP_ASRC_RATIO(block)		(0x0008 + (block) * 4)	/* Ratio Register x */
+#define MCHP_ASRC_VBPS_IN		0x0018	/* Valid Bit Per Sample In Register */
+#define MCHP_ASRC_VBPS_OUT		0x001C	/* Valid Bit Per Sample Out Register */
+#define MCHP_ASRC_CH_CONF		0x0020	/* Channel Configuration Register */
+#define MCHP_ASRC_TRIG			0x0024	/* Trigger Selection Register */
+
+#define MCHP_ASRC_RHR(block)		(0x0028 + 4 * (block))	/* Receive Holding Registers */
+#define MCHP_ASRC_THR(block)		(0x0048 + 4 * (block))	/* Transmit Holding Registers */
+
+#define MCHP_ASRC_IER(block)		(0x0068 + 4 * (block))
+#define MCHP_ASRC_IDR(block)		(0x0078 + 4 * (block))
+#define MCHP_ASRC_IMR(block)		(0x0088 + 4 * (block))
+#define MCHP_ASRC_ISR(block)		(0x0098 + 4 * (block))
+
+#define MCHP_ASRC_ESR			0x00A8	/* Error Status Register */
+
+#define MCHP_ASRC_WPMR			0x00E4	/* Write Protection Mode Register */
+#define MCHP_ASRC_WPSR			0x00E8	/* Write Protection Status Register */
+
+#define MCHP_ASRC_VERSION		0x00FC	/* Version Register */
+
+/*
+ * ---- Control Register (Write-only) ----
+ */
+#define MCHP_ASRC_CR_SWRST		BIT(0)
+
+/*
+ * ---- Mode Register (Read/Write) ----
+ */
+/* ASRC Stereo Channel x Enable */
+#define MCHP_ASRC_MR_ASRCEN_MASK	GENMASK(3, 0)
+#define MCHP_ASRC_MR_ASRCEN(block)	BIT(block)
+
+/* Sampling frequency greater than 96 KHz  */
+#define MCHP_ASRC_MR_GT96K		BIT(12)
+
+/*
+ * ---- Ratio Register of Stereo Channel x (Read/Write) ----
+ */
+/* Input Internal Sampling Rate Ratio */
+#define MCHP_ASRC_RATIO_INRATIO_MASK	GENMASK(15, 0)
+#define MCHP_ASRC_RATIO_INRATIO(ratio)	((ratio) & MCHP_ASRC_RATIO_INRATIO_MASK)
+
+/* Output Internal Sampling Rate Ratio */
+#define MCHP_ASRC_RATIO_OUTRATIO_MASK	GENMASK(31, 16)
+#define MCHP_ASRC_RATIO_OUTRATIO(ratio) \
+	(((ratio) << 16) & MCHP_ASRC_RATIO_OUTRATIO_MASK)
+
+/*
+ * ---- Valid bit Per Sample In/Out (Read/Write) ----
+ */
+#define MCHP_ASRC_VBPS_MASK(block) \
+	(GENMASK(3, 0) << ((block) * 8))
+#define MCHP_ASRC_VBPS(block, val) \
+	(((val) & GENMASK(3, 0)) << ((block) * 8))
+
+#define MCHP_ASRC_VBPS_8_BIT(block)	MCHP_ASRC_VBPS(block, 0)
+#define MCHP_ASRC_VBPS_16_BIT(block)	MCHP_ASRC_VBPS(block, 1)
+#define MCHP_ASRC_VBPS_20_BIT(block)	MCHP_ASRC_VBPS(block, 2)
+#define MCHP_ASRC_VBPS_24_BIT(block)	MCHP_ASRC_VBPS(block, 3)
+#define MCHP_ASRC_VBPS_32_BIT(block)	MCHP_ASRC_VBPS(block, 4)
+#define MCHP_ASRC_VBPS_10_BIT(block)	MCHP_ASRC_VBPS(block, 5)
+#define MCHP_ASRC_VBPS_12_BIT(block)	MCHP_ASRC_VBPS(block, 6)
+#define MCHP_ASRC_VBPS_14_BIT(block)	MCHP_ASRC_VBPS(block, 7)
+#define MCHP_ASRC_VBPS_18_BIT(block)	MCHP_ASRC_VBPS(block, 8)
+
+/*
+ * ---- Channel configuration Registers (Read/Write) ----
+ */
+/* Operating Mode for Transmit Holding Registers */
+#define MCHP_ASRC_CH_CONF_THROPMODE_MASK	GENMASK(2, 0)
+#define MCHP_ASRC_CH_CONF_THROPMODE(val) \
+	((val) & MCHP_ASRC_CH_CONF_THROPMODE_MASK)
+
+/* Operating Mode for Receive Holding Registers */
+#define MCHP_ASRC_CH_CONF_RHROPMODE_MASK	GENMASK(6, 4)
+#define MCHP_ASRC_CH_CONF_RHROPMODE(val) \
+	(((val) << 4) & MCHP_ASRC_CH_CONF_RHROPMODE_MASK)
+
+/* Audio Block Operating Mode; Mono or Stereo */
+#define MCHP_ASRC_CH_CONF_MONO_MASK		GENMASK(11, 8)
+#define MCHP_ASRC_CH_CONF_MONO(ch)		BIT((ch) + 8)
+
+/* DMA Audio Block x CHUNK Size */
+#define MCHP_ASRC_CH_CONF_CHUNK_MASK(block) \
+	(GENMASK(2, 0) << ((block) * 4 + 16))
+#define MCHP_ASRC_CH_CONF_CHUNK(block, val) \
+	(((val) & GENMASK(2, 0)) << ((block) * 4 + 16))
+#define MCHP_ASRC_CH_CONF_CHUNK_1_DATA(block)	MCHP_ASRC_CH_CONF_CHUNK(block, 0)
+#define MCHP_ASRC_CH_CONF_CHUNK_2_DATA(block)	MCHP_ASRC_CH_CONF_CHUNK(block, 1)
+#define MCHP_ASRC_CH_CONF_CHUNK_4_DATA(block)	MCHP_ASRC_CH_CONF_CHUNK(block, 2)
+#define MCHP_ASRC_CH_CONF_CHUNK_8_DATA(block)	MCHP_ASRC_CH_CONF_CHUNK(block, 3)
+#define MCHP_ASRC_CH_CONF_CHUNK_16_DATA(block)	MCHP_ASRC_CH_CONF_CHUNK(block, 4)
+
+/*
+ * ---- Trigger Selection Registers (Read/Write) ----
+ */
+#define MCHP_ASRC_TRIG_TRIGSELIN_MASK(ch) \
+	(GENMASK(3, 0) << ((ch) * 4))
+#define MCHP_ASRC_TRIG_TRIGSELIN(src, ch) \
+	(((src) & GENMASK(3, 0)) << ((ch) * 4))
+
+#define MCHP_ASRC_TRIG_TRIGSELOUT_MASK(ch) \
+	(GENMASK(3, 0) << ((ch) * 4 + 16))
+#define MCHP_ASRC_TRIG_TRIGSELOUT(src, ch) \
+	(((src) & GENMASK(3, 0)) << ((ch) * 4 + 16))
+
+/*
+ * ---- Interrupt Enable/Disable/Mask/Status Registers ----
+ */
+#define MCHP_ASRC_IR_RXRDY		BIT(0)
+#define MCHP_ASRC_IR_RXEMPTY		BIT(1)
+#define MCHP_ASRC_IR_RXFULL		BIT(2)
+#define MCHP_ASRC_IR_RXCHUNK		BIT(3)
+#define MCHP_ASRC_IR_RXUDR		BIT(4)
+#define MCHP_ASRC_IR_RXOVR		BIT(5)
+
+#define MCHP_ASRC_IR_TXRDY		BIT(8)
+#define MCHP_ASRC_IR_TXEMPTY		BIT(9)
+#define MCHP_ASRC_IR_TXFULL		BIT(10)
+#define MCHP_ASRC_IR_TXCHUNK		BIT(11)
+#define MCHP_ASRC_IR_TXUDR		BIT(12)
+#define MCHP_ASRC_IR_TXOVR		BIT(13)
+
+#define MCHP_ASRC_IR_SECE		BIT(16)
+
+#define MCHP_ASRC_IR_LOCK		BIT(30)
+
+/*
+ * ---- Error Status Register (Read-only) ----
+ */
+#define MCHP_ASRC_ESR_INCFGERR_MASK	GENMASK(4, 0)
+#define MCHP_ASRC_ESR_OUTCFGERR_MASK	GENMASK(12, 8)
+
+/*
+ * ---- Version Register (Read-only) ----
+ */
+#define MCHP_ASRC_VERSION_MASK		GENMASK(11, 0)
+
+#define MCHP_ASRC_LT96K_RATIO_MIN		2048
+#define MCHP_ASRC_GT96K_RATIO_MIN		1024
+#define MCHP_ASRC_TRIG_IDX_MAX_VAL		16
+#define MCHP_ASRC_RATIO_MAX			MCHP_ASRC_RATIO_INRATIO_MASK
+#define MCHP_ASRC_OPMODE_MAX			5
+
+static const struct regmap_config mchp_asrc_regmap_config = {
+	.reg_bits = 32,
+	.reg_stride = 4,
+	.val_bits = 32,
+	.max_register = MCHP_ASRC_VERSION,
+};
+
+static const struct snd_soc_dapm_route mchp_asrc_route[] = {
+	{"ASRC-Playback 1", NULL, "ASRC-Capture 1"},
+	{"ASRC-Playback 2", NULL, "ASRC-Capture 2"},
+	{"ASRC-Playback 3", NULL, "ASRC-Capture 3"},
+	{"ASRC-Playback 4", NULL, "ASRC-Capture 4"},
+};
+
+static const struct snd_soc_component_driver mchp_asrc_component = {
+	.name			= "mchp-asrc-dai",
+	.dapm_routes		= mchp_asrc_route,
+	.num_dapm_routes	= ARRAY_SIZE(mchp_asrc_route),
+};
+
+/* one slot in the ASRC, representing one or more DSPs reserverd for PCM */
+struct mchp_asrc_slot {
+	int first_dsp;
+	int dsp_count;
+	int slot_id;
+};
+
+struct opmode_to_slot {
+	struct mchp_asrc_slot slot[MCHP_ASRC_NB_STEREO_CH];
+};
+
+/* represents the slots with the used DSPs for each opmode */
+static const struct opmode_to_slot asrc_map[] = {
+	{{{0, 1, 0},		{1, 1, 1},	{2, 1, 2},	{3, 1, 3}}},
+	{{{0, 2, 0},		{2, 1, 1},	{3, 1, 2}}},
+	{{{0, 2, 0},		{2, 2, 1}}},
+	{{{0, 3, 0},		{3, 1, 1}}},
+	{{{0, 4, 0}}},
+};
+
+struct xmit_ch {
+	int thr_ch[MCHP_ASRC_NB_STEREO_CH];
+	int rhr_ch[MCHP_ASRC_NB_STEREO_CH];
+	int thr_ch_count;
+	int rhr_ch_count;
+	int dsps_used;
+	bool in_use;
+};
+
+struct opmode {
+	struct xmit_ch tc[MCHP_ASRC_NB_STEREO_CH];
+	int tc_count;
+};
+
+/* represents the transmit and receive channels for all opmode combinations */
+static struct opmode ch_conf[MCHP_ASRC_OPMODE_MAX][MCHP_ASRC_OPMODE_MAX] = {
+	[0][0] = {{
+		{{0}, {0}, 1, 1, 1},
+		{{1}, {1}, 1, 1, 1},
+		{{2}, {2}, 1, 1, 1},
+		{{3}, {3}, 1, 1, 1},
+	}, 4,					/* THOPMODE 0, RHOPMODE 0 */
+	},
+	[0][1] = {{
+		{{0, 1}, {0}, 2, 1, 2},
+		{{2}, {1}, 1, 1, 1},
+		{{3}, {2}, 1, 1, 1},
+	}, 3,					/* THOPMODE 0, RHOPMODE 1 */
+	},
+	[0][2] = {{
+		{{0, 1}, {0}, 2, 1, 2},
+		{{2, 3}, {1}, 2, 1, 2},
+	}, 2,					/* THOPMODE 0, RHOPMODE 2 */
+	},
+	[0][3] = {{
+		{{0, 1, 2}, {0}, 3, 1, 3},
+		{{3}, {1}, 1, 1, 1},
+	}, 2,					/* THOPMODE 0, RHOPMODE 3 */
+	},
+	[0][4] = {{
+		{{0, 1, 2, 3}, {0}, 4, 1, 4},
+	}, 1,					/* THOPMODE 0, RHOPMODE 4 */
+	},
+	[1][0] = {{
+		{{0}, {0, 1}, 1, 2, 2},
+		{{1}, {2}, 1, 1, 1},
+		{{2}, {3}, 1, 1, 1},
+	}, 3,					/* THOPMODE 1, RHOPMODE 0 */
+	},
+	[1][1] = {{
+		{{0}, {0}, 1, 1, 2},
+		{{1}, {1}, 1, 1, 1},
+		{{2}, {2}, 1, 1, 1},
+	}, 3,					/* THOPMODE 1, RHOPMODE 1 */
+	},
+	[1][2] = {{
+		{{0}, {0}, 1, 1, 2},
+		{{1, 2}, {1}, 2, 1, 2},
+	}, 2,					/* THOPMODE 1, RHOPMODE 2 */
+	},
+	[1][3] = {{
+		{{0, 1}, {0}, 2, 1, 3},
+		{{2}, {1}, 1, 1, 1},
+	}, 2,					/* THOPMODE 1, RHOPMODE 3 */
+	},
+	[1][4] = {{
+		{{0, 1, 2}, {0}, 3, 1, 4},
+	}, 1,					/* THOPMODE 1, RHOPMODE 4 */
+	},
+	[2][0] = {{
+		{{0}, {0, 1}, 1, 2, 2},
+		{{1}, {2, 3}, 1, 2, 2},
+	}, 2,					/* THOPMODE 2, RHOPMODE 0 */
+	},
+	[2][1] = {{
+		{{0}, {0}, 1, 1, 2},
+		{{1}, {1, 2}, 1, 2, 2},
+	}, 2,					/* THOPMODE 2, RHOPMODE 1 */
+	},
+	[2][2] = {{
+		{{0}, {0}, 1, 1, 2},
+		{{1}, {1}, 1, 1, 2},
+	}, 2,					/* THOPMODE 2, RHOPMODE 2 */
+	},
+	[2][3] = {{
+		/* not implemented for now */
+		{{0}, {0}, 1, 1, 2},
+		{{1}, {0}, 1, 1, 1},
+		{{1}, {1}, 1, 1, 1},
+	}, 3,					/* THOPMODE 2, RHOPMODE 3 */
+	},
+	[2][4] = {{
+		{{0, 1}, {0}, 2, 1, 4},
+	}, 1,					/* THOPMODE 2, RHOPMODE 4 */
+	},
+	[3][0] = {{
+		{{0}, {0, 1, 2}, 1, 3, 3},
+		{{1}, {3}, 1, 1, 1},
+	}, 2,					/* THOPMODE 3, RHOPMODE 0 */
+	},
+	[3][1] = {{
+		{{0}, {0, 1}, 1, 2, 3},
+		{{1}, {2}, 1, 1, 1},
+	}, 2,					/* THOPMODE 3, RHOPMODE 1 */
+	},
+	[3][2] = {{
+		/* not implemented for now */
+		{{0}, {0}, 1, 1, 2},
+		{{0}, {1}, 1, 1, 1},
+		{{1}, {1}, 1, 1, 1},
+	}, 3,					/* THOPMODE 3, RHOPMODE 2 */
+	},
+	[3][3] = {{
+		{{0}, {0}, 1, 1, 3},
+		{{1}, {1}, 1, 1, 1},
+	}, 2,					/* THOPMODE 3, RHOPMODE 3 */
+	},
+	[3][4] = {{
+		{{0, 1}, {0}, 2, 1, 4},
+	}, 1,					/* THOPMODE 3, RHOPMODE 4 */
+	},
+	[4][0] = {{
+		{{0}, {0, 1, 2, 3}, 1, 4, 4},
+	}, 1,					/* THOPMODE 4, RHOPMODE 0 */
+	},
+	[4][1] = {{
+		{{0}, {0, 1, 2}, 1, 3, 4},
+	}, 1,					/* THOPMODE 4, RHOPMODE 1 */
+	},
+	[4][2] = {{
+		{{0}, {0, 1}, 1, 2, 4},
+	}, 1,					/* THOPMODE 4, RHOPMODE 2 */
+	},
+	[4][3] = {{
+		{{0}, {0, 1}, 1, 2, 4},
+	}, 1,					/* THOPMODE 4, RHOPMODE 3 */
+	},
+	[4][4] = {{
+		{{0}, {0}, 1, 1, 4},
+	}, 1,					/* THOPMODE 4, RHOPMODE 4 */
+	},
+};
+
+struct mchp_asrc_be_trigger;
+
+/* runtime structure to dynamically associate a trigger wth a BE DAI */
+struct mchp_asrc_be_rtm {
+	struct mchp_asrc_be_trigger	*trig;	/* backpointer */
+	struct snd_pcm_hw_params	*hw_params;	// used by the links that are not BE
+	struct mchp_asrc_slot const	*slot;
+	int				maxburst;
+	struct list_head		list;
+};
+
+/* associated with one HW BE audio IP */
+struct mchp_asrc_be_trigger {
+	struct mchp_asrc_be_rtm		*rtm[SNDRV_PCM_STREAM_LAST + 1];
+	struct mchp_asrc_dev		*priv;				/* backpointer */
+	struct of_phandle_args		*phandle;
+	u32				idx;
+};
+
+struct mchp_asrc_dsp_priv {
+	struct mchp_asrc_dmaengine_dai_dma	*dma;
+};
+
+struct mchp_asrc_pcm_priv {
+	struct mchp_asrc_dmaengine_dai_dma	dma;
+	struct list_head			list_head_in;
+	struct list_head			list_head_out;
+	struct xmit_ch				*tc;
+	struct mchp_asrc_be_rtm			rtm_fe;		/* used for FE --- BEs links */
+	int					refcount;
+	bool					is_hostless;
+};
+
+struct mchp_asrc_dev {
+	struct mchp_asrc_dsp_priv		dsp[MCHP_ASRC_NB_STEREO_CH];
+	struct mchp_asrc_pcm_priv		*pcm[MCHP_ASRC_NB_STEREO_CH];
+	struct device				*dev;
+	struct regmap				*regmap;
+	struct clk				*pclk;
+	struct clk				*gclk;
+	struct resource				*mem;
+	struct mchp_asrc_be_trigger		*trig;
+	int					trig_count;
+	int					thr_opmode;
+	int					rhr_opmode;
+};
+
+static inline int mchp_asrc_period_to_burst(int period_size)
+{
+	if (!(period_size % 16))
+		return 16;
+
+	if (!(period_size % 8))
+		return 8;
+
+	if (!(period_size % 4))
+		return 4;
+
+	if (!(period_size % 2))
+		return 2;
+
+	return 1;
+}
+
+static inline int mchp_asrc_burst_to_chunk(int dsp, int burst)
+{
+	switch (burst) {
+	case 16:
+		return MCHP_ASRC_CH_CONF_CHUNK_16_DATA(dsp);
+	case 8:
+		return MCHP_ASRC_CH_CONF_CHUNK_8_DATA(dsp);
+	case 4:
+		return MCHP_ASRC_CH_CONF_CHUNK_4_DATA(dsp);
+	case 2:
+		return MCHP_ASRC_CH_CONF_CHUNK_2_DATA(dsp);
+	default:
+		return MCHP_ASRC_CH_CONF_CHUNK_1_DATA(dsp);
+	}
+}
+
+/* rule to limit the number of channels based on available DSPs and available BEs */
+static int mchp_asrc_ch_rule(struct snd_pcm_hw_params *params, struct snd_pcm_hw_rule *rule)
+{
+	struct mchp_asrc_dev *priv = rule->private;
+	struct snd_interval t;
+	int dsps_running;
+	int max_dsps_avail;
+	u32 mr;
+
+	regmap_read(priv->regmap, MCHP_ASRC_MR, &mr);
+	dsps_running = hweight32(mr & MCHP_ASRC_MR_ASRCEN_MASK);
+
+	/* there are no limitatins if there are no running DSPs */
+	if (!dsps_running)
+		return 0;
+
+	/* with sr over 96000, only 2 DSPs can be used */
+	if (mr & MCHP_ASRC_MR_GT96K)
+		max_dsps_avail = 2;
+	else
+		max_dsps_avail = MCHP_ASRC_NB_STEREO_CH;
+
+	if (max_dsps_avail <= dsps_running)
+		return -EBUSY;
+
+	snd_interval_any(&t);
+	t.max = (max_dsps_avail - dsps_running) * 2;
+
+	return snd_interval_refine(hw_param_interval(params, rule->var), &t);
+}
+
+/* rule to never have a sampling rate greater than 96kHz if more than 2 DSPs are used */
+static int mchp_asrc_ch_rate_rule(struct snd_pcm_hw_params *params, struct snd_pcm_hw_rule *rule)
+{
+	struct snd_interval t;
+	struct mchp_asrc_dev *priv = rule->private;
+	unsigned int gclk_max_rate;
+	unsigned int fs = params_rate(params);
+	int dsps_running;
+	int dsps_req = (params_channels(params) + 1) / 2;
+	int gt96k;
+	u32 mr;
+
+	snd_interval_any(&t);
+
+	/* GCLK can't be 4 times higher than PCLK */
+	gclk_max_rate = clk_get_rate(priv->pclk) * 4 - 1;
+
+	regmap_read(priv->regmap, MCHP_ASRC_MR, &mr);
+	dsps_running = hweight32(mr & MCHP_ASRC_MR_ASRCEN_MASK);
+
+	if (!dsps_running) {
+		if (fs > 96000)
+			t.max = gclk_max_rate / MCHP_ASRC_GT96K_RATIO_MIN;
+		else
+			t.max = min(gclk_max_rate / MCHP_ASRC_LT96K_RATIO_MIN, 96000U);
+		return snd_interval_refine(hw_param_interval(params, rule->var), &t);
+	}
+
+	/* some DSPs are running so GT96K can't be changed */
+	gt96k = !!(mr & MCHP_ASRC_MR_GT96K);
+	if (dsps_running + dsps_req <= 2) {
+		if (gt96k)
+			t.max = gclk_max_rate / MCHP_ASRC_GT96K_RATIO_MIN;
+		else
+			t.max = min(gclk_max_rate / MCHP_ASRC_LT96K_RATIO_MIN, 96000U);
+		return snd_interval_refine(hw_param_interval(params, rule->var), &t);
+	}
+
+	/* if GT96K bit is set, only 2 DSPs can run */
+	if (dsps_running + dsps_req > 2 && gt96k)
+		return -EBUSY;
+
+	t.max = min(gclk_max_rate / MCHP_ASRC_LT96K_RATIO_MIN, 96000U);
+	return snd_interval_refine(hw_param_interval(params, rule->var), &t);
+}
+
+static int mchp_asrc_startup(struct snd_pcm_substream *substream,
+			     struct snd_soc_dai *dai)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct mchp_asrc_dev *priv = snd_soc_dai_get_drvdata(dai);
+	struct snd_soc_dpcm *dpcm;
+	int dsps_running;
+	int ret;
+	u32 mr;
+	int i;
+
+	regmap_read(priv->regmap, MCHP_ASRC_MR, &mr);
+	dsps_running = hweight32(mr & MCHP_ASRC_MR_ASRCEN_MASK);
+
+	/*
+	 * if there are already 2 DSPs running at a sampling rate higher than
+	 * 96kHz, we can not use the rest of the DSPs
+	 */
+	if (dsps_running >= 2 && (mr & MCHP_ASRC_MR_GT96K))
+		return -EBUSY;
+
+	ret = snd_pcm_hw_rule_add(substream->runtime, 0, SNDRV_PCM_HW_PARAM_CHANNELS,
+				  mchp_asrc_ch_rule, priv, SNDRV_PCM_HW_PARAM_CHANNELS, -1);
+	if (ret < 0) {
+		dev_err(rtd->dev, "failed to add rule for no of channels: %d", ret);
+		return ret;
+	}
+
+	ret = snd_pcm_hw_rule_add(substream->runtime, 0, SNDRV_PCM_HW_PARAM_RATE,
+				  mchp_asrc_ch_rate_rule, priv, SNDRV_PCM_HW_PARAM_CHANNELS,
+				  SNDRV_PCM_HW_PARAM_RATE, -1);
+	if (ret < 0) {
+		dev_err(rtd->dev, "failed to add rule for sampling rate: %d", ret);
+		return ret;
+	}
+
+	for_each_dpcm_be(rtd, substream->stream, dpcm) {
+		struct snd_soc_pcm_runtime *be = dpcm->be;
+		struct snd_soc_dai *dai_be = asoc_rtd_to_cpu(be, 0);
+		struct snd_pcm_substream *substream_be;
+
+		if (dpcm->fe != rtd)
+			continue;
+
+		substream_be = snd_soc_dpcm_get_substream(be, substream->stream);
+		if (!substream_be)
+			continue;
+
+		dev_dbg(rtd->dev, "%s() Found BE DAI %s\n", __func__, dai_be->name);
+
+		for (i = 0; i < priv->trig_count; i++) {
+			struct mchp_asrc_be_trigger *trig_be = &priv->trig[i];
+			struct mchp_asrc_be_rtm *rtm_be;
+
+			if (!trig_be->phandle || trig_be->phandle->np != dai_be->dev->of_node)
+				continue;
+
+			dev_dbg(priv->dev, "BE %s found in triger list with id %d\n",
+				dai_be->name, trig_be->idx);
+
+			if (trig_be->rtm[substream->stream]) {
+				dev_err(priv->dev, "interface %s already running\n",
+					trig_be->phandle->np->full_name);
+				ret = -EBUSY;
+				goto __cleanup_rtm;
+			}
+
+			rtm_be = kzalloc(sizeof(*rtm_be), GFP_KERNEL);
+			if (!rtm_be) {
+				ret = -ENOMEM;
+				goto __cleanup_rtm;
+			}
+
+			rtm_be->trig = trig_be;
+			trig_be->rtm[substream->stream] = rtm_be;
+			break;
+		}
+		if (i == priv->trig_count) {
+			dev_warn(rtd->dev, "Trigger not found for BE DAI %s\n", dai_be->name);
+			continue;
+		}
+	}
+
+	return 0;
+
+__cleanup_rtm:
+	for_each_dpcm_be_rollback(rtd, substream->stream, dpcm) {
+		struct snd_soc_pcm_runtime *be = dpcm->be;
+		struct snd_soc_dai *dai_be = asoc_rtd_to_cpu(be, 0);
+		struct snd_pcm_substream *substream_be;
+		int i;
+
+		if (dpcm->fe != rtd)
+			continue;
+
+		substream_be = snd_soc_dpcm_get_substream(be, substream->stream);
+		if (!substream_be)
+			continue;
+
+		for (i = 0; i < priv->trig_count; i++) {
+			struct mchp_asrc_be_trigger *trig_be = &priv->trig[i];
+
+			if (!trig_be->phandle || trig_be->phandle->np != dai_be->dev->of_node)
+				continue;
+
+			if (!trig_be->rtm[substream->stream])
+				break;
+
+			kfree(trig_be->rtm[substream->stream]);
+			trig_be->rtm[substream->stream] = NULL;
+		}
+	}
+
+	return ret;
+}
+
+static void mchp_asrc_shutdown(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct mchp_asrc_dev *priv = snd_soc_dai_get_drvdata(dai);
+	struct snd_soc_dpcm *dpcm;
+	int i;
+
+	for_each_dpcm_be(rtd, substream->stream, dpcm) {
+		struct snd_soc_pcm_runtime *be = dpcm->be;
+		struct snd_soc_dai *dai_be = asoc_rtd_to_cpu(be, 0);
+		struct snd_pcm_substream *substream_be;
+
+		if (dpcm->fe != rtd)
+			continue;
+
+		substream_be = snd_soc_dpcm_get_substream(be, substream->stream);
+		if (!substream_be)
+			continue;
+
+		for (i = 0; i < priv->trig_count; i++) {
+			struct mchp_asrc_be_trigger *trig_be = &priv->trig[i];
+
+			if (!trig_be->phandle || trig_be->phandle->np != dai_be->dev->of_node)
+				continue;
+
+			kfree(trig_be->rtm[substream->stream]);
+			trig_be->rtm[substream->stream] = NULL;
+			break;
+		}
+	}
+}
+
+static u32 mchp_asrc_vbps_to_reg(int vbps, int block)
+{
+	switch (vbps) {
+	case 8:
+		return MCHP_ASRC_VBPS_8_BIT(block);
+	case 10:
+		return MCHP_ASRC_VBPS_10_BIT(block);
+	case 12:
+		return MCHP_ASRC_VBPS_12_BIT(block);
+	case 14:
+		return MCHP_ASRC_VBPS_14_BIT(block);
+	case 16:
+		return MCHP_ASRC_VBPS_16_BIT(block);
+	case 18:
+		return MCHP_ASRC_VBPS_18_BIT(block);
+	case 20:
+		return MCHP_ASRC_VBPS_20_BIT(block);
+	case 24:
+		return MCHP_ASRC_VBPS_24_BIT(block);
+	case 32:
+		return MCHP_ASRC_VBPS_32_BIT(block);
+	default:
+		return 0;
+	}
+}
+
+static int mchp_asrc_bes_get(struct mchp_asrc_dev *priv, struct snd_pcm_substream *substream,
+			     struct list_head *head, bool set_trig)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dpcm *dpcm;
+	int i;
+
+	for_each_dpcm_be(rtd, substream->stream, dpcm) {
+		struct snd_soc_pcm_runtime *be = dpcm->be;
+		struct snd_soc_dai *dai = asoc_rtd_to_cpu(be, 0);
+		struct snd_pcm_substream *substream_be;
+		int period_bytes;
+
+		if (dpcm->fe != rtd)
+			continue;
+
+		substream_be = snd_soc_dpcm_get_substream(be, substream->stream);
+		if (!substream_be)
+			continue;
+
+		dev_dbg(rtd->dev,
+			"%s() BE DAI %s: (dpcm_params) rate=%u format=%#x width=%u channels=%u\n",
+			__func__, dai->name, params_rate(&dpcm->hw_params),
+			params_format(&dpcm->hw_params), params_width(&dpcm->hw_params),
+			params_channels(&dpcm->hw_params));
+
+		period_bytes = snd_pcm_lib_period_bytes(substream_be);
+		for (i = 0; i < priv->trig_count; i++) {
+			struct mchp_asrc_be_trigger *trig_be = &priv->trig[i];
+			struct mchp_asrc_be_rtm *rtm_be;
+
+			if (!trig_be->phandle || trig_be->phandle->np != dai->dev->of_node)
+				continue;
+
+			dev_dbg(priv->dev, "BE found in triger list with id %d\n",
+				trig_be->idx);
+
+			rtm_be = trig_be->rtm[substream->stream];
+			if (set_trig)
+				rtm_be->trig = trig_be;
+			rtm_be->hw_params = &dpcm->hw_params;
+			rtm_be->maxburst = mchp_asrc_period_to_burst(period_bytes);
+
+			/* keep the order */
+			list_add_tail(&rtm_be->list, head);
+			break;
+		}
+
+		if (i == priv->trig_count) {
+			dev_err(rtd->dev, "no BE trigger found for DAI %s\n", dai->name);
+			return -EINVAL;
+		}
+	}
+
+	return 0;
+}
+
+static int mchp_asrc_validate_bes(struct mchp_asrc_dev *priv, struct list_head *head, int channels)
+{
+	struct mchp_asrc_be_rtm *rtm_be;
+	int dsps_req = (channels + 1) / 2;
+	int ch_be_sum = 0;
+	int dsps_avail;
+	int dsps_prev_be = MCHP_ASRC_NB_STEREO_CH;
+	u32 reg;
+
+	/* get the number of free DSPs */
+	regmap_read(priv->regmap, MCHP_ASRC_MR, &reg);
+	dsps_avail = MCHP_ASRC_NB_STEREO_CH - hweight32(reg & MCHP_ASRC_MR_ASRCEN_MASK);
+
+	if (dsps_req && dsps_avail < dsps_req) {
+		dev_err(priv->dev, "Not enough DSPs available (%d) to play %d audio channel(s)\n",
+			dsps_avail, channels);
+		return -EBUSY;
+	}
+
+	/* the numer of DSPs needed for each BE needs to be in a descending order */
+	list_for_each_entry(rtm_be, head, list) {
+		int ch_be = params_channels(rtm_be->hw_params);
+
+		if ((ch_be + 1) / 2 > dsps_prev_be) {
+			dev_err(priv->dev,
+				"the nr of DSPs needed for each BE is not in a descending order\n");
+			return -EINVAL;
+		}
+		ch_be_sum += ch_be;
+		dsps_prev_be = (ch_be + 1) / 2;
+	}
+
+	/*
+	 * the number of channels on FE needs to be the same with
+	 * the one used on all BEs
+	 */
+	if (channels && channels != ch_be_sum) {
+		dev_err(priv->dev, "FE uses %d channels, BEs uses %d channels\n",
+			channels, ch_be_sum);
+		return -EINVAL;
+	}
+
+	return ch_be_sum;
+}
+
+static int mchp_asrc_is_tc_valid(struct mchp_asrc_pcm_priv *pcm, struct xmit_ch *tc,
+				 int single_aif_is_in, int thr_opmode, int rhr_opmode,
+				 int *aif, int aif_nr)
+{
+	struct opmode_to_slot const *be_opm;
+	int *be_chan;
+	int fe_chan_count, be_chan_count;
+	int i;
+
+	/* for now we support only one FE */
+	/* one-to-many scenario */
+	if (single_aif_is_in) {
+		be_chan = tc->rhr_ch;
+		fe_chan_count = tc->thr_ch_count;
+		be_chan_count = tc->rhr_ch_count;
+		be_opm = &asrc_map[rhr_opmode];
+	} else {
+	/* many-to-one scenario */
+		be_chan = tc->thr_ch;
+		fe_chan_count = tc->rhr_ch_count;
+		be_chan_count = tc->thr_ch_count;
+		be_opm = &asrc_map[thr_opmode];
+	}
+
+	if (fe_chan_count != 1 || aif_nr != be_chan_count)
+		return -EINVAL;
+
+	for (i = 0; i < aif_nr; i++) {
+		int dsps_avail = be_opm->slot[be_chan[i]].dsp_count;
+
+		if (dsps_avail != aif[i])
+			return -EINVAL;
+	}
+
+	tc->in_use = true;
+
+	return 0;
+}
+
+static struct xmit_ch *
+mchp_asrc_find_tc(struct mchp_asrc_pcm_priv *pcm, int dsps_req, int single_aif_is_in,
+		  int thr_opmode, int rhr_opmode, int *aif, int aif_nr)
+{
+	struct opmode *current_conf = &ch_conf[thr_opmode][rhr_opmode];
+	int i;
+	int ret;
+
+	for (i = 0; i < current_conf->tc_count; i++) {
+		struct xmit_ch *tc = &current_conf->tc[i];
+
+		if (tc->in_use || dsps_req != tc->dsps_used)
+			continue;
+
+		/* the first slot is used both as FE and BE */
+		ret = mchp_asrc_is_tc_valid(pcm, tc, single_aif_is_in, thr_opmode, rhr_opmode,
+					    aif, aif_nr);
+		if (!ret)
+			return tc;
+	}
+
+	return NULL;
+}
+
+static int mchp_asrc_tc_get(struct mchp_asrc_dev *priv, struct snd_soc_dai *dai)
+{
+	int aif_in[MCHP_ASRC_NB_STEREO_CH] = {0};
+	int aif_out[MCHP_ASRC_NB_STEREO_CH] = {0};
+	int aif_in_nr = 0;
+	int aif_out_nr = 0;
+	struct mchp_asrc_be_rtm *rtm_be;
+	int dsps_in = 0, dsps_out = 0;
+	struct xmit_ch *tc;
+	int thr, rhr;
+	int *aif, aif_nr;
+	bool single_aif_is_in;
+	struct mchp_asrc_pcm_priv *pcm = priv->pcm[dai->id];
+	int i;
+
+	/* both OPMODES must be set, or none */
+	if (priv->thr_opmode * priv->rhr_opmode < 0)
+		return -EINVAL;
+
+	/* get no of DSPs needed for each IN and OUT AIFs */
+	list_for_each_entry(rtm_be, &pcm->list_head_in, list) {
+		int dsps = (params_channels(rtm_be->hw_params) + 1) / 2;
+
+		aif_in[aif_in_nr++] = dsps;
+
+		dev_dbg(priv->dev, "AIF %s needs %d DSPs, index %d\n",
+			rtm_be->trig ? rtm_be->trig->phandle->np->full_name : "front-end",
+			dsps, aif_in_nr - 1);
+	}
+	list_for_each_entry(rtm_be, &pcm->list_head_out, list) {
+		int dsps = (params_channels(rtm_be->hw_params) + 1) / 2;
+
+		aif_out[aif_out_nr++] = dsps;
+
+		dev_dbg(priv->dev, "AIF %s needs %d DSPs, index %d\n",
+			rtm_be->trig ? rtm_be->trig->phandle->np->full_name : "front-end",
+			dsps, aif_out_nr - 1);
+	}
+
+	if (aif_in_nr == 1) {
+		single_aif_is_in = true;
+		aif = aif_out;
+		aif_nr = aif_out_nr;
+	} else if (aif_out_nr == 1) {
+		single_aif_is_in = false;
+		aif = aif_in;
+		aif_nr = aif_in_nr;
+	} else {
+		dev_err(priv->dev,
+			"PCM %s (de)mux %d -> %d AIFs; do not use many-to-many\n",
+			dai->name, aif_in_nr, aif_out_nr);
+		return -EINVAL;
+	}
+
+	for (i = 0; i < aif_in_nr; i++)
+		dsps_in += aif_in[i];
+	for (i = 0; i < aif_out_nr; i++)
+		dsps_out += aif_out[i];
+	if (dsps_in != dsps_out) {
+		dev_err(priv->dev, "%d -> %d DSPs; number needs to match\n",
+			dsps_in, dsps_out);
+		return -EINVAL;
+	}
+
+	/* the OPMODEs are already set, check if there are free transmit channels */
+	if (priv->thr_opmode != -1) {
+		thr = priv->thr_opmode;
+		rhr = priv->rhr_opmode;
+		tc = mchp_asrc_find_tc(pcm, dsps_in, single_aif_is_in, thr, rhr,
+				       aif, aif_nr);
+		if (tc)
+			goto __found_tc;
+
+		/* already selected opmode is not ok for FE */
+		dev_err(priv->dev, "no compatible transmit channels left in THR/RHR opmode %d/%d\n",
+			priv->thr_opmode, priv->rhr_opmode);
+		return -EBUSY;
+	}
+	for (thr = 0; thr < MCHP_ASRC_OPMODE_MAX; thr++) {
+		for (rhr = 0; rhr < MCHP_ASRC_OPMODE_MAX; rhr++) {
+			tc = mchp_asrc_find_tc(pcm, dsps_in, single_aif_is_in, thr,
+					       rhr, aif, aif_nr);
+			if (tc)
+				goto __found_tc_init;
+		}
+	}
+
+	return -EINVAL;
+
+__found_tc_init:
+	dev_dbg(priv->dev, "%s() opmodes THR %d RHR %d\n", __func__,
+		thr, rhr);
+	priv->thr_opmode = thr;
+	priv->rhr_opmode = rhr;
+	regmap_update_bits(priv->regmap, MCHP_ASRC_CH_CONF,
+			   MCHP_ASRC_CH_CONF_THROPMODE_MASK |
+			   MCHP_ASRC_CH_CONF_RHROPMODE_MASK,
+			   MCHP_ASRC_CH_CONF_THROPMODE(thr) |
+			   MCHP_ASRC_CH_CONF_RHROPMODE(rhr));
+__found_tc:
+#ifdef DEBUG
+	dev_dbg(priv->dev, "%s() transmit channels:\n", __func__);
+	for (i = 0; i < tc->thr_ch_count; i++)
+		dev_dbg(priv->dev, "%s() %d, ", __func__, tc->thr_ch[i]);
+	dev_dbg(priv->dev, "%s() receive channels:\n", __func__);
+	for (i = 0; i < tc->rhr_ch_count; i++)
+		dev_dbg(priv->dev, "%s() %d, ", __func__, tc->rhr_ch[i]);
+#endif
+	/* select one FE slot, the first one */
+	pcm->tc = tc;
+	return 0;
+}
+
+static void mchp_asrc_tc_free(struct mchp_asrc_dev *priv, struct mchp_asrc_pcm_priv *pcm)
+{
+	struct opmode *op;
+	int i;
+
+	pcm->tc->in_use = false;
+
+	op = &ch_conf[priv->thr_opmode][priv->rhr_opmode];
+	for (i = 0; i < op->tc_count; i++) {
+		/* do not clear OPMODES if there are running PCMs */
+		if (op->tc[i].in_use)
+			return;
+	}
+
+	priv->thr_opmode = -1;
+	priv->rhr_opmode = -1;
+	regmap_update_bits(priv->regmap, MCHP_ASRC_CH_CONF,
+			   MCHP_ASRC_CH_CONF_THROPMODE_MASK | MCHP_ASRC_CH_CONF_RHROPMODE_MASK, 0);
+}
+
+static void mchp_asrc_maxburst_limit(int thr_opmode, int rhr_opmode,
+				     int dsps_used, bool is_mono,
+				     int *maxburst)
+{
+	if ((thr_opmode == 0 || rhr_opmode == 0 || dsps_used == 1) &&
+	    *maxburst > 4) {
+		if (is_mono)
+			*maxburst = 4;
+		else
+			*maxburst = 8;
+		return;
+	}
+	if ((thr_opmode != 4 || rhr_opmode != 4) && is_mono && *maxburst > 8)
+		*maxburst = 8;
+}
+
+static int mchp_asrc_hw_params(struct snd_pcm_substream *substream,
+			       struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
+{
+	struct mchp_asrc_dev *priv = snd_soc_dai_get_drvdata(dai);
+	struct mchp_asrc_dmaengine_dai_dma *dma;
+	struct mchp_asrc_dmaengine_be_dma *dma_be, *tmp;
+	struct mchp_asrc_pcm_priv *pcm;
+	int width = params ? params_width(params) : 0;
+	int src_width, dst_width;
+	unsigned long rate;
+	unsigned int fs = params ? params_rate(params) : 0;
+	unsigned int max_sr = fs;
+	bool is_playback = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
+	u32 ratio;
+	unsigned int channels = params ? params_channels(params) : 0;
+	unsigned int dsps_req = (channels + 1) / 2;
+	u32 ch_conf = 0;
+	u32 ch_conf_mask = 0;
+	int ret;
+	u32 mr;
+	u32 trig = 0, trig_mask = 0;
+	u32 vbps_in = 0, vbps_out = 0, vbps_mask = 0;
+	struct mchp_asrc_be_rtm *rtm_be;
+	int dsp;
+	int dsps_running;
+	int ratio_min;
+	struct list_head *list_head_bes;
+	int i;
+	int maxburst[MCHP_ASRC_NB_STEREO_CH]  = {0};
+	struct opmode_to_slot const *be_opm;
+	struct xmit_ch *tc;
+
+	dev_dbg(priv->dev, "%s() DAI %s id %d rate=%u format=%#x width=%u channels=%u\n",
+		__func__, dai->name, dai->id, fs, params ? params_format(params) : 0,
+		width, channels);
+
+	/* on a hostless link, pcm might be allocated previously */
+	if (priv->pcm[dai->id]) {
+		if (params) {
+			dev_err(priv->dev, "PCM running on id %d\n", dai->id);
+			return -EBUSY;
+		}
+		pcm = priv->pcm[dai->id];
+		pcm->refcount++;
+	} else {
+		pcm = kzalloc(sizeof(*pcm), GFP_KERNEL);
+		if (!pcm)
+			return -ENOMEM;
+		if (!params)
+			pcm->is_hostless = true;
+
+		INIT_LIST_HEAD(&pcm->list_head_in);
+		INIT_LIST_HEAD(&pcm->list_head_out);
+		INIT_LIST_HEAD(&pcm->dma.dma_in_list);
+		INIT_LIST_HEAD(&pcm->dma.dma_out_list);
+		pcm->refcount++;
+		priv->pcm[dai->id] = pcm;
+	}
+	dma = &pcm->dma;
+
+	if (is_playback) {
+		/* for playback, this callback is for the OUT BEs */
+		list_head_bes = &pcm->list_head_out;
+	} else {
+		/* for capture, this callback is for the IN BEs */
+		list_head_bes = &pcm->list_head_in;
+	}
+
+	INIT_LIST_HEAD(list_head_bes);
+
+	ret = mchp_asrc_bes_get(priv, substream, list_head_bes, true);
+	if (ret < 0)
+		goto __cleanup_free_pcm;
+
+	dev_dbg(priv->dev, "%s() BE triggers:\n", __func__);
+#ifdef DEBUG
+	list_for_each_entry(rtm_be, list_head_bes, list) {
+		struct mchp_asrc_be_trigger *trig_be = rtm_be->trig;
+
+		dev_dbg(priv->dev, "%s, index %d\n", trig_be->phandle->np->full_name, trig_be->idx);
+	}
+#endif
+
+	ret = mchp_asrc_validate_bes(priv, list_head_bes, channels);
+	if (ret < 0)
+		goto __cleanup_bes;
+
+	dsps_req = (ret + 1) / 2;
+
+	if (!pcm->is_hostless) {
+		int period_size = snd_pcm_lib_period_bytes(substream);
+
+		pcm->rtm_fe.hw_params = params;
+		pcm->rtm_fe.trig = NULL;
+		pcm->rtm_fe.maxburst = mchp_asrc_period_to_burst(period_size);
+
+		/* keep the order */
+		if (is_playback)
+			list_add_tail(&pcm->rtm_fe.list, &pcm->list_head_in);
+		else
+			list_add_tail(&pcm->rtm_fe.list, &pcm->list_head_out);
+	}
+
+	if (list_empty(&pcm->list_head_in) || list_empty(&pcm->list_head_out)) {
+		/* incomplete BE-to-BE link; return and wait for the BEs on the other stream */
+		dev_dbg(priv->dev, "%s() first half for %s finished\n", __func__,
+			is_playback ? "playback" : "capture");
+		goto __skip_conf;
+	}
+
+	ret = mchp_asrc_tc_get(priv, dai);
+	if (ret < 0)
+		goto __cleanup_bes;
+
+	tc = pcm->tc;
+
+	/* check if DSPs needed by this TC are free */
+	for (i = 0; i < tc->thr_ch_count; i++) {
+		struct mchp_asrc_slot const *slot = &asrc_map[priv->thr_opmode].slot[tc->thr_ch[i]];
+		int j;
+
+		for (j = slot->first_dsp; j < slot->first_dsp + slot->dsp_count; j++) {
+			if (priv->dsp[j].dma) {
+				dev_err(priv->dev, "DSP %d already in use\n", j);
+				ret = -EBUSY;
+				goto __cleanup_free_tc;
+			}
+		}
+	}
+
+	/* reserve DSPs */
+	for (i = 0; i < tc->thr_ch_count; i++) {
+		struct mchp_asrc_slot const *slot = &asrc_map[priv->thr_opmode].slot[tc->thr_ch[i]];
+		int j;
+
+		for (j = slot->first_dsp; j < slot->first_dsp + slot->dsp_count; j++)
+			priv->dsp[j].dma = dma;
+	}
+
+	/* assign in and out slots for AIFs */
+	be_opm = &asrc_map[priv->rhr_opmode];
+	i = 0;
+	list_for_each_entry(rtm_be, &pcm->list_head_out, list) {
+		dev_dbg(priv->dev, "%s(): AIF %s slot id %d\n", __func__,
+			rtm_be->trig ? rtm_be->trig->phandle->np->full_name : dai->name,
+		tc->rhr_ch[i]);
+		rtm_be->slot = &be_opm->slot[tc->rhr_ch[i++]];
+	}
+
+	be_opm = &asrc_map[priv->thr_opmode];
+	i = 0;
+	list_for_each_entry(rtm_be, &pcm->list_head_in, list) {
+		dev_dbg(priv->dev, "%s(): AIF %s slot id %d\n", __func__,
+			rtm_be->trig ? rtm_be->trig->phandle->np->full_name : dai->name,
+			tc->thr_ch[i]);
+		rtm_be->slot = &be_opm->slot[tc->thr_ch[i++]];
+	}
+
+	/* set mono DSPs, trigger index and valid bits */
+	list_for_each_entry(rtm_be, &pcm->list_head_in, list) {
+		struct mchp_asrc_be_trigger *trig_be = rtm_be->trig;
+		struct mchp_asrc_slot const *slot_be = rtm_be->slot;
+		int chan_be = params_channels(rtm_be->hw_params);
+		u32 idx = trig_be ? trig_be->idx : 0;
+
+		/* treat odd streams, set only last DSP as mono */
+		if (chan_be % 2) {
+			dsp = slot_be->first_dsp + slot_be->dsp_count - 1;
+			ch_conf |= MCHP_ASRC_CH_CONF_MONO(dsp);
+			ch_conf_mask |= MCHP_ASRC_CH_CONF_MONO(dsp);
+		}
+
+		for (dsp = slot_be->first_dsp;
+		     dsp < slot_be->first_dsp + slot_be->dsp_count; dsp++) {
+			trig_mask |= MCHP_ASRC_TRIG_TRIGSELIN_MASK(dsp);
+			trig |= MCHP_ASRC_TRIG_TRIGSELIN(idx, dsp);
+		}
+
+		src_width = params_width(rtm_be->hw_params);
+		for (dsp = slot_be->first_dsp; dsp < slot_be->first_dsp + slot_be->dsp_count;
+		     dsp++) {
+			vbps_mask |= MCHP_ASRC_VBPS_MASK(dsp);
+			vbps_in |= mchp_asrc_vbps_to_reg(src_width, dsp);
+		}
+
+		if (max_sr < params_rate(rtm_be->hw_params))
+			max_sr = params_rate(rtm_be->hw_params);
+
+		maxburst[slot_be->slot_id] = rtm_be->maxburst;
+
+		mchp_asrc_maxburst_limit(priv->thr_opmode, priv->rhr_opmode, slot_be->dsp_count,
+					 chan_be % 2, &maxburst[slot_be->slot_id]);
+	}
+
+	list_for_each_entry(rtm_be, &pcm->list_head_out, list) {
+		struct mchp_asrc_be_trigger *trig_be = rtm_be->trig;
+		struct mchp_asrc_slot const *slot_be = rtm_be->slot;
+		int chan_be = params_channels(rtm_be->hw_params);
+		u32 idx = trig_be ? trig_be->idx : 0;
+
+		/* treat odd streams, set only last DSP as mono */
+		if (chan_be % 2) {
+			dsp = slot_be->first_dsp + slot_be->dsp_count - 1;
+			ch_conf |= MCHP_ASRC_CH_CONF_MONO(dsp);
+			ch_conf_mask |= MCHP_ASRC_CH_CONF_MONO(dsp);
+		}
+
+		for (dsp = slot_be->first_dsp;
+		     dsp < slot_be->first_dsp + slot_be->dsp_count; dsp++) {
+			trig_mask |= MCHP_ASRC_TRIG_TRIGSELOUT_MASK(dsp);
+			trig |= MCHP_ASRC_TRIG_TRIGSELOUT(idx, dsp);
+		}
+
+		dst_width = params_width(rtm_be->hw_params);
+		for (dsp = slot_be->first_dsp; dsp < slot_be->first_dsp + slot_be->dsp_count;
+		     dsp++) {
+			vbps_mask |= MCHP_ASRC_VBPS_MASK(dsp);
+			vbps_out |= mchp_asrc_vbps_to_reg(dst_width, dsp);
+		}
+
+		if (max_sr < params_rate(rtm_be->hw_params))
+			max_sr = params_rate(rtm_be->hw_params);
+
+		if (!maxburst[slot_be->slot_id] ||
+		    maxburst[slot_be->slot_id] > rtm_be->maxburst)
+			maxburst[slot_be->slot_id] = rtm_be->maxburst;
+
+		mchp_asrc_maxburst_limit(priv->thr_opmode, priv->rhr_opmode,
+					 slot_be->dsp_count, chan_be % 2,
+					 &maxburst[slot_be->slot_id]);
+	}
+
+	/* set DMAengine data for each IN/OUT AIF */
+	INIT_LIST_HEAD(&dma->dma_in_list);
+	list_for_each_entry(rtm_be, &pcm->list_head_in, list) {
+		struct mchp_asrc_be_trigger *trig_be = rtm_be->trig;
+		struct mchp_asrc_slot const *slot_be = rtm_be->slot;
+		struct snd_dmaengine_dai_dma_data *dma_data_be;
+
+		dma_be = kzalloc(sizeof(*dma_be), GFP_KERNEL);
+		if (!dma_be) {
+			ret = -ENOMEM;
+			goto __cleanup_dma_bes;
+		}
+
+		dma_be->phandle = trig_be ? trig_be->phandle : NULL;
+		dma_data_be = &dma_be->dma_data;
+		dma_data_be->addr = (dma_addr_t)priv->mem->start + MCHP_ASRC_THR(slot_be->slot_id);
+		dma_data_be->chan_name = kasprintf(GFP_KERNEL, "tx%d", slot_be->slot_id);
+		if (!dma_data_be->chan_name) {
+			ret = -ENOMEM;
+			goto __cleanup_dma_bes;
+		}
+		dma_data_be->maxburst = maxburst[slot_be->slot_id];
+
+		/* keep the order of the BEs */
+		list_add_tail(&dma_be->list, &dma->dma_in_list);
+
+		dev_dbg(priv->dev,
+			"%s() IN AIF %s: DMA addr %#x DMA chan %s DMA maxburst %d\n",
+			__func__, trig_be ? trig_be->phandle->np->full_name : dai->name,
+			dma_data_be->addr, dma_data_be->chan_name, dma_data_be->maxburst);
+	}
+
+	INIT_LIST_HEAD(&dma->dma_out_list);
+	list_for_each_entry(rtm_be, &pcm->list_head_out, list) {
+		struct mchp_asrc_be_trigger *trig_be = rtm_be->trig;
+		struct mchp_asrc_slot const *slot_be = rtm_be->slot;
+		struct snd_dmaengine_dai_dma_data *dma_data_be;
+		int dsp;
+
+		dma_be = kzalloc(sizeof(*dma_be), GFP_KERNEL);
+		if (!dma_be) {
+			ret = -ENOMEM;
+			goto __cleanup_dma_bes;
+		}
+
+		dma_be->phandle = trig_be ? trig_be->phandle : NULL;
+		dma_data_be = &dma_be->dma_data;
+		dma_data_be->addr = (dma_addr_t)priv->mem->start + MCHP_ASRC_RHR(slot_be->slot_id);
+		dma_data_be->chan_name = kasprintf(GFP_KERNEL, "rx%d", slot_be->slot_id);
+		if (!dma_data_be->chan_name) {
+			ret = -ENOMEM;
+			goto __cleanup_dma_bes;
+		}
+		dma_data_be->maxburst = maxburst[slot_be->slot_id];
+
+		 /* needed only once, since the same DPSs are used for IN and OUT AIFs */
+		for (dsp = slot_be->first_dsp; dsp < slot_be->first_dsp + slot_be->dsp_count;
+		     dsp++) {
+			ch_conf |= mchp_asrc_burst_to_chunk(dsp,
+							    maxburst[slot_be->slot_id]);
+			ch_conf_mask |= MCHP_ASRC_CH_CONF_CHUNK_MASK(dsp);
+		}
+
+		/* keep the order of the BEs */
+		list_add_tail(&dma_be->list, &dma->dma_out_list);
+
+		dev_dbg(priv->dev,
+			"%s() OUT AIF %s: DMA addr %#x DMA chan %s DMA maxburst %d\n",
+			__func__, trig_be ? trig_be->phandle->np->full_name : dai->name,
+			dma_data_be->addr, dma_data_be->chan_name, dma_data_be->maxburst);
+	}
+
+	/* get the number of free DSPs */
+	regmap_read(priv->regmap, MCHP_ASRC_MR, &mr);
+	dsps_running = hweight32(mr & MCHP_ASRC_MR_ASRCEN_MASK);
+
+	/* GCLK could be set to a good value using assigned clocks or by a previous DPCM */
+	rate = clk_get_rate(priv->gclk);
+	if (!rate) {
+		dev_err(priv->dev, "Unable to get rate for gclk\n");
+		ret = -ENODEV;
+		goto __cleanup_dma_bes;
+	}
+	dev_dbg(priv->dev, "Current gclk rate: %lu\n", rate);
+
+	/* we assume GCLK is enabled if there are running DSPs */
+	if (dsps_running) {
+		if (mr & MCHP_ASRC_MR_GT96K)
+			ratio_min = MCHP_ASRC_GT96K_RATIO_MIN;
+		else
+			ratio_min = MCHP_ASRC_LT96K_RATIO_MIN;
+	} else {
+		if (max_sr > 96000) {
+			ratio_min = MCHP_ASRC_GT96K_RATIO_MIN;
+			regmap_update_bits(priv->regmap, MCHP_ASRC_MR, MCHP_ASRC_MR_GT96K,
+					   MCHP_ASRC_MR_GT96K);
+		} else {
+			ratio_min = MCHP_ASRC_LT96K_RATIO_MIN;
+		}
+	}
+	if (!dsps_running && ((rate % max_sr) || ratio_min > (rate / max_sr))) {
+		/* try to change GCLK if current value is not ok */
+		unsigned long round_rate = (unsigned long)ratio_min * max_sr;
+		unsigned long best_rate;
+		unsigned long diff;
+
+		for (rate = round_rate;
+		     rate <= (unsigned long)ratio_min * MCHP_ASRC_RATIO_MAX;
+		     rate += max_sr) {
+			round_rate = clk_round_rate(priv->gclk, rate);
+			if (diff > abs(round_rate - rate)) {
+				diff = abs(round_rate - rate);
+				best_rate = rate;
+			}
+			if (!diff)
+				break;
+		}
+
+		dev_dbg(priv->dev, "%s() trying to set GCLK to %lu\n", __func__, best_rate);
+		ret = clk_set_rate(priv->gclk, best_rate);
+		if (ret) {
+			dev_err(priv->dev, "unable to set GCLK rate: SR %u * ratio %lu\n",
+				max_sr, (best_rate / max_sr));
+			goto __cleanup_mr;
+		}
+	}
+
+	/* get real GCLK rate, to set the correct ratio */
+	rate = clk_get_rate(priv->gclk);
+	if (!rate) {
+		dev_err(priv->dev, "Unable to get rate for GCLK\n");
+		ret = -ENODEV;
+		goto __cleanup_mr;
+	}
+	dev_dbg(priv->dev, "Real GCLK rate: %lu\n", rate);
+
+	ret = clk_prepare_enable(priv->gclk);
+	if (ret < 0) {
+		dev_err(priv->dev, "unable to enable GCLK: %d\n", ret);
+		goto __cleanup_mr;
+	}
+
+	/* IN/OUT RATIO are not needed on a hostless PCM */
+	if (pcm->is_hostless)
+		goto __skip_inout;
+
+	/* set IN/OUT RATIO for all DSPs in the FE slot */
+	if (is_playback)
+		list_head_bes = &pcm->list_head_in;
+	else
+		list_head_bes = &pcm->list_head_out;
+
+	list_for_each_entry(rtm_be, list_head_bes, list) {
+		struct mchp_asrc_slot const *slot_fe = rtm_be->slot;
+
+		ratio = rate / params_rate(rtm_be->hw_params);
+		for (dsp = slot_fe->first_dsp; dsp < slot_fe->first_dsp + slot_fe->dsp_count;
+		     dsp++) {
+			if (is_playback) {
+				regmap_update_bits(priv->regmap, MCHP_ASRC_RATIO(dsp),
+						   MCHP_ASRC_RATIO_INRATIO_MASK,
+						   MCHP_ASRC_RATIO_INRATIO(ratio));
+			} else {
+				regmap_update_bits(priv->regmap, MCHP_ASRC_RATIO(dsp),
+						   MCHP_ASRC_RATIO_OUTRATIO_MASK,
+						   MCHP_ASRC_RATIO_OUTRATIO(ratio));
+			}
+		}
+	}
+
+__skip_inout:
+	dev_dbg(priv->dev, "writing TRIG %#x, VBPS_IN %#x, VBPS_OUT %#x, CH_CONF %#x\n",
+		trig & trig_mask, vbps_in & vbps_mask, vbps_out & vbps_mask,
+		ch_conf & ch_conf_mask);
+
+	regmap_update_bits(priv->regmap, MCHP_ASRC_TRIG, trig_mask, trig);
+	regmap_update_bits(priv->regmap, MCHP_ASRC_VBPS_IN, vbps_mask, vbps_in);
+	regmap_update_bits(priv->regmap, MCHP_ASRC_VBPS_OUT, vbps_mask, vbps_out);
+	regmap_update_bits(priv->regmap, MCHP_ASRC_CH_CONF, ch_conf_mask, ch_conf);
+
+	snd_soc_dai_init_dma_data(dai, dma, dma);
+__skip_conf:
+
+	list_for_each_entry(rtm_be, &pcm->list_head_in, list) {
+		dev_dbg(priv->dev, "%s(): looking at IN %s\n", __func__,
+			rtm_be->trig ? rtm_be->trig->phandle->np->full_name : "front-end");
+	}
+	list_for_each_entry(rtm_be, &pcm->list_head_out, list) {
+		dev_dbg(priv->dev, "%s(): looking at OUT %s\n", __func__,
+			rtm_be->trig ? rtm_be->trig->phandle->np->full_name : "front-end");
+	}
+	return 0;
+
+__cleanup_mr:
+	if (!dsps_running)
+		regmap_update_bits(priv->regmap, MCHP_ASRC_MR, MCHP_ASRC_MR_GT96K, 0);
+__cleanup_dma_bes:
+	list_for_each_entry_safe(dma_be, tmp, &dma->dma_in_list, list) {
+		list_del(&dma_be->list);
+		kfree(dma_be->dma_data.chan_name);
+		dma_be->dma_data.chan_name = NULL;
+		kfree(dma_be);
+	}
+	list_for_each_entry_safe(dma_be, tmp, &dma->dma_out_list, list) {
+		list_del(&dma_be->list);
+		kfree(dma_be->dma_data.chan_name);
+		dma_be->dma_data.chan_name = NULL;
+		kfree(dma_be);
+	}
+
+	list_for_each_entry(rtm_be, &pcm->list_head_in, list)
+		rtm_be->slot = NULL;
+	list_for_each_entry(rtm_be, &pcm->list_head_out, list)
+		rtm_be->slot = NULL;
+	for (i = 0; i < pcm->tc->thr_ch_count; i++) {
+		struct mchp_asrc_slot const *slot = &asrc_map[priv->thr_opmode].slot[tc->thr_ch[i]];
+		int j;
+
+		for (j = slot->first_dsp; j < slot->first_dsp + slot->dsp_count; j++)
+			priv->dsp[j].dma = NULL;
+	}
+__cleanup_free_tc:
+	mchp_asrc_tc_free(priv, pcm);
+__cleanup_bes:
+	if (is_playback)
+		INIT_LIST_HEAD(&pcm->list_head_out);
+	else
+		INIT_LIST_HEAD(&pcm->list_head_in);
+__cleanup_free_pcm:
+	pcm->refcount--;
+	if (!pcm->refcount) {
+		kfree(pcm);
+		priv->pcm[dai->id] = NULL;
+	}
+
+	return ret;
+}
+
+static int mchp_asrc_hw_free(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
+{
+	struct mchp_asrc_dev *priv = snd_soc_dai_get_drvdata(dai);
+	struct mchp_asrc_dmaengine_be_dma *dma_be, *tmp;
+	struct mchp_asrc_dmaengine_dai_dma *dma;
+	struct mchp_asrc_be_rtm *rtm_be;
+	struct xmit_ch *tc;
+	struct list_head *list_head_fes;
+	bool is_playback = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
+	u32 val = 0;
+	u32 mask = 0;
+	u32 ch_conf_mask = 0;
+	int dsp;
+	struct mchp_asrc_pcm_priv *pcm = priv->pcm[dai->id];
+	bool are_dsps_running;
+	int i;
+
+	/* nothing to do if no pcm is available */
+	if (!pcm)
+		return 0;
+
+	regmap_read(priv->regmap, MCHP_ASRC_MR, &val);
+	are_dsps_running = !!(val & MCHP_ASRC_MR_ASRCEN_MASK);
+
+	if (!pcm->is_hostless) {
+		if (is_playback)
+			list_head_fes = &pcm->list_head_in;
+		else
+			list_head_fes = &pcm->list_head_out;
+
+		list_for_each_entry(rtm_be, list_head_fes, list) {
+			struct mchp_asrc_slot const *slot_fe = rtm_be->slot;
+
+			for (dsp = slot_fe->first_dsp;
+			     dsp < slot_fe->first_dsp + slot_fe->dsp_count; dsp++) {
+				if (is_playback) {
+					regmap_update_bits(priv->regmap, MCHP_ASRC_RATIO(dsp),
+							   MCHP_ASRC_RATIO_INRATIO_MASK, 0);
+				} else {
+					regmap_update_bits(priv->regmap, MCHP_ASRC_RATIO(dsp),
+							   MCHP_ASRC_RATIO_OUTRATIO_MASK, 0);
+				}
+			}
+		}
+	}
+
+	if (pcm->refcount == 2 || !pcm->is_hostless) {
+		/* unset DMAengine data */
+		snd_soc_dai_init_dma_data(dai, NULL, NULL);
+
+		clk_disable_unprepare(priv->gclk);
+
+		/* cleanup BE channel names */
+		dma = &pcm->dma;
+		list_for_each_entry_safe(dma_be, tmp, &dma->dma_in_list, list) {
+			struct snd_dmaengine_dai_dma_data *dma_data_be;
+
+			list_del(&dma_be->list);
+			dma_data_be = &dma_be->dma_data;
+			kfree(dma_data_be->chan_name);
+			dma_data_be->chan_name = NULL;
+			kfree(dma_be);
+		}
+
+		/* free DSPs */
+		tc = pcm->tc;
+		for (i = 0; i < tc->thr_ch_count; i++) {
+			struct mchp_asrc_slot const *slot;
+			int j;
+
+			slot = &asrc_map[priv->thr_opmode].slot[tc->thr_ch[i]];
+			for (j = slot->first_dsp; j < slot->first_dsp + slot->dsp_count; j++)
+				priv->dsp[j].dma = NULL;
+		}
+		list_for_each_entry_safe(dma_be, tmp, &dma->dma_out_list, list) {
+			struct snd_dmaengine_dai_dma_data *dma_data_be;
+
+			list_del(&dma_be->list);
+			dma_data_be = &dma_be->dma_data;
+			kfree(dma_data_be->chan_name);
+			dma_data_be->chan_name = NULL;
+			kfree(dma_be);
+		}
+
+		/* free mono DSPs, trigger index, and chunk size */
+		list_for_each_entry(rtm_be, &pcm->list_head_in, list) {
+			struct mchp_asrc_slot const *slot_be = rtm_be->slot;
+
+			for (dsp = slot_be->first_dsp;
+			     dsp < slot_be->first_dsp + slot_be->dsp_count; dsp++) {
+				ch_conf_mask |= MCHP_ASRC_CH_CONF_MONO(dsp);
+				mask |= MCHP_ASRC_TRIG_TRIGSELIN_MASK(dsp);
+			}
+			ch_conf_mask |= MCHP_ASRC_CH_CONF_CHUNK_MASK(slot_be->slot_id);
+			rtm_be->slot = NULL;
+		}
+		list_for_each_entry(rtm_be, &pcm->list_head_out, list) {
+			struct mchp_asrc_slot const *slot_be = rtm_be->slot;
+
+			for (dsp = slot_be->first_dsp;
+			     dsp < slot_be->first_dsp + slot_be->dsp_count; dsp++) {
+				ch_conf_mask |= MCHP_ASRC_CH_CONF_MONO(dsp);
+				mask |= MCHP_ASRC_TRIG_TRIGSELOUT_MASK(dsp);
+			}
+			ch_conf_mask |= MCHP_ASRC_CH_CONF_CHUNK_MASK(slot_be->slot_id);
+			rtm_be->slot = NULL;
+		}
+
+		mchp_asrc_tc_free(priv, pcm);
+	}
+
+	pcm->refcount--;
+	if (!pcm->refcount) {
+		kfree(pcm);
+		priv->pcm[dai->id] = NULL;
+	}
+
+	if (!are_dsps_running)
+		regmap_update_bits(priv->regmap, MCHP_ASRC_MR, MCHP_ASRC_MR_GT96K, 0);
+
+	/* cleanup the triggers for the used DSPs */
+	regmap_update_bits(priv->regmap, MCHP_ASRC_TRIG, mask, 0);
+
+	/* cleanup CHUNK and MONO DSPs */
+	regmap_update_bits(priv->regmap, MCHP_ASRC_CH_CONF, ch_conf_mask, 0);
+
+	return 0;
+}
+
+#ifdef DEBUG
+static void mchp_asrc_reg_dump(struct mchp_asrc_dev *priv)
+{
+	int i;
+	u32 val;
+
+	regmap_read(priv->regmap, MCHP_ASRC_MR, &val);
+	dev_dbg(priv->dev, "%s() Mode register %#x\n", __func__, val);
+	for (i = 0; i < MCHP_ASRC_NB_STEREO_CH; i++) {
+		regmap_read(priv->regmap, MCHP_ASRC_RATIO(i), &val);
+		dev_dbg(priv->dev, "%s() Ratio%d register %#x\n", __func__, i, val);
+	}
+	regmap_read(priv->regmap, MCHP_ASRC_VBPS_IN, &val);
+	dev_dbg(priv->dev, "%s() VBPS in register %#x\n", __func__, val);
+	regmap_read(priv->regmap, MCHP_ASRC_VBPS_OUT, &val);
+	dev_dbg(priv->dev, "%s() VBPS out register %#x\n", __func__, val);
+	regmap_read(priv->regmap, MCHP_ASRC_CH_CONF, &val);
+	dev_dbg(priv->dev, "%s() Channel conf register %#x\n", __func__, val);
+	regmap_read(priv->regmap, MCHP_ASRC_TRIG, &val);
+	dev_dbg(priv->dev, "%s() Trigger sel register %#x\n", __func__, val);
+	for (i = 0; i < MCHP_ASRC_NB_STEREO_CH; i++) {
+		regmap_read(priv->regmap, MCHP_ASRC_IMR(i), &val);
+		dev_dbg(priv->dev, "%s() Interrupt mask register%d %#x\n", __func__, i, val);
+	}
+}
+#else
+static void mchp_asrc_reg_dump(struct mchp_asrc_dev *priv) {}
+#endif
+
+static void mchp_asrc_dsps_trigger(struct mchp_asrc_dev *priv, struct mchp_asrc_be_rtm *rtm_be,
+				   bool enable, u32 *mr)
+{
+	struct mchp_asrc_slot const *slot_be = rtm_be->slot;
+	u32 ir_reg = 0;
+	u32 ir = 0;
+	int dsp;
+
+	if (!slot_be) {
+		dev_dbg(priv->dev, "%s has no slot\n",
+			rtm_be->trig ? rtm_be->trig->phandle->np->full_name : "front-end");
+		return;
+	}
+#ifdef DEBUG
+	ir |= MCHP_ASRC_IR_RXUDR | MCHP_ASRC_IR_RXOVR | MCHP_ASRC_IR_TXUDR | MCHP_ASRC_IR_TXOVR;
+#endif
+
+	if (enable)
+		ir |= MCHP_ASRC_IR_LOCK;
+
+	dev_dbg(priv->dev, "%s() DSPs %s for BE %s:\n", __func__, enable ? "enabled" : "disabled",
+		rtm_be->trig ? rtm_be->trig->phandle->np->full_name : "front-end");
+
+	for (dsp = slot_be->first_dsp; dsp < slot_be->first_dsp + slot_be->dsp_count; dsp++) {
+		/* Enable interrupt and wait for DPLL LOCK */
+		if (enable)
+			ir_reg = MCHP_ASRC_IER(dsp);
+		else
+			ir_reg = MCHP_ASRC_IDR(dsp);
+		regmap_update_bits(priv->regmap, ir_reg, ir, ir);
+		*mr |= MCHP_ASRC_MR_ASRCEN(dsp);
+		if (enable)
+			priv->dsp[dsp].dma->unlocked_dsps++;
+		dev_dbg(priv->dev, "%s() %d\n", __func__, dsp);
+	}
+}
+
+static int mchp_asrc_trigger(struct snd_pcm_substream *substream, int cmd, struct snd_soc_dai *dai)
+{
+	struct mchp_asrc_dev *priv = snd_soc_dai_get_drvdata(dai);
+	struct mchp_asrc_pcm_priv *pcm = priv->pcm[dai->id];
+	struct mchp_asrc_dmaengine_dai_dma *dma;
+	struct mchp_asrc_be_rtm *rtm_be;
+	u32 mr = 0;
+
+	if (!pcm) {
+		dev_err(priv->dev, "PCM not allocated for id %d\n", dai->id);
+		return -EINVAL;
+	}
+
+	dma = &pcm->dma;
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		list_for_each_entry(rtm_be, &pcm->list_head_in, list)
+			mchp_asrc_dsps_trigger(priv, rtm_be, true, &mr);
+		list_for_each_entry(rtm_be, &pcm->list_head_out, list)
+			mchp_asrc_dsps_trigger(priv, rtm_be, true, &mr);
+		dma->unlocked_dsps /= 2;
+		regmap_update_bits(priv->regmap, MCHP_ASRC_MR, mr, mr);
+		mchp_asrc_reg_dump(priv);
+		return 0;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		list_for_each_entry(rtm_be, &pcm->list_head_out, list)
+			mchp_asrc_dsps_trigger(priv, rtm_be, false, &mr);
+		list_for_each_entry(rtm_be, &pcm->list_head_in, list)
+			mchp_asrc_dsps_trigger(priv, rtm_be, false, &mr);
+
+		regmap_update_bits(priv->regmap, MCHP_ASRC_MR, mr, 0);
+		mchp_asrc_reg_dump(priv);
+		return 0;
+	default:
+		return -EINVAL;
+	}
+}
+
+static const struct snd_soc_dai_ops mchp_asrc_dai_ops = {
+	.startup	= mchp_asrc_startup,
+	.trigger	= mchp_asrc_trigger,
+	.hw_params	= mchp_asrc_hw_params,
+	.hw_free	= mchp_asrc_hw_free,
+	.shutdown	= mchp_asrc_shutdown,
+};
+
+#define MCHP_ASRC_RATES	SNDRV_PCM_RATE_8000_192000
+#define MCHP_ASRC_FORMATS	(SNDRV_PCM_FMTBIT_S8 | \
+				 SNDRV_PCM_FMTBIT_S16_LE | \
+				 SNDRV_PCM_FMTBIT_S18_3LE | \
+				 SNDRV_PCM_FMTBIT_S20_3LE | \
+				 SNDRV_PCM_FMTBIT_S24_3LE | \
+				 SNDRV_PCM_FMTBIT_S24_LE | \
+				 SNDRV_PCM_FMTBIT_S32_LE)
+
+static struct snd_soc_dai_driver mchp_asrc_dai[] = {
+	{
+		.name = "asrc-pcm-1",
+		.playback = {
+			.stream_name = "ASRC-Playback 1",
+			.channels_min = 1,
+			.channels_max = 8,
+			.rates = MCHP_ASRC_RATES,
+			.formats = MCHP_ASRC_FORMATS,
+		},
+		.capture = {
+			.stream_name = "ASRC-Capture 1",
+			.channels_min = 1,
+			.channels_max = 8,
+			.rates = MCHP_ASRC_RATES,
+			.formats = MCHP_ASRC_FORMATS,
+		},
+		.ops = &mchp_asrc_dai_ops,
+	},
+	{
+		.name = "asrc-pcm-2",
+		.playback = {
+			.stream_name = "ASRC-Playback 2",
+			.channels_min = 1,
+			.channels_max = 8,
+			.rates = MCHP_ASRC_RATES,
+			.formats = MCHP_ASRC_FORMATS,
+		},
+		.capture = {
+			.stream_name = "ASRC-Capture 2",
+			.channels_min = 1,
+			.channels_max = 8,
+			.rates = MCHP_ASRC_RATES,
+			.formats = MCHP_ASRC_FORMATS,
+		},
+		.ops = &mchp_asrc_dai_ops,
+	},
+	{
+		.name = "asrc-pcm-3",
+		.playback = {
+			.stream_name = "ASRC-Playback 3",
+			.channels_min = 1,
+			.channels_max = 8,
+			.rates = MCHP_ASRC_RATES,
+			.formats = MCHP_ASRC_FORMATS,
+		},
+		.capture = {
+			.stream_name = "ASRC-Capture 3",
+			.channels_min = 1,
+			.channels_max = 8,
+			.rates = MCHP_ASRC_RATES,
+			.formats = MCHP_ASRC_FORMATS,
+		},
+		.ops = &mchp_asrc_dai_ops,
+	},
+	{
+		.name = "asrc-pcm-4",
+		.playback = {
+			.stream_name = "ASRC-Playback 4",
+			.channels_min = 1,
+			.channels_max = 8,
+			.rates = MCHP_ASRC_RATES,
+			.formats = MCHP_ASRC_FORMATS,
+		},
+		.capture = {
+			.stream_name = "ASRC-Capture 4",
+			.channels_min = 1,
+			.channels_max = 8,
+			.rates = MCHP_ASRC_RATES,
+			.formats = MCHP_ASRC_FORMATS,
+		},
+		.ops = &mchp_asrc_dai_ops,
+	},
+};
+
+static void mchp_asrc_block_pending_intr(struct mchp_asrc_dev *priv,
+					 u32 pending, int block)
+{
+	struct device *dev = priv->dev;
+
+#ifdef DEBUG
+	if (pending & MCHP_ASRC_IR_RXRDY)
+		dev_info_ratelimited(dev, "block %d: RX Ready detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_RXEMPTY)
+		dev_warn_ratelimited(dev, "block %d: RX FIFO Empty detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_RXFULL)
+		dev_warn_ratelimited(dev, "block %d: RX FIFO Full detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_RXCHUNK)
+		dev_info_ratelimited(dev, "block %d: RX FIFO Chunk detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_TXRDY)
+		dev_info_ratelimited(dev, "block %d: TX Ready detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_TXEMPTY)
+		dev_warn_ratelimited(dev, "block %d: TX FIFO Empty detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_TXFULL)
+		dev_warn_ratelimited(dev, "block %d: TX FIFO Full detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_TXCHUNK)
+		dev_info_ratelimited(dev, "block %d: TX FIFO Chunk detected\n", block);
+
+#endif
+	if (pending & MCHP_ASRC_IR_RXUDR)
+		dev_err_ratelimited(dev, "block %d: RX Underflow detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_RXOVR)
+		dev_err_ratelimited(dev, "block %d: RX Overflow detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_TXUDR)
+		dev_err_ratelimited(dev, "block %d: TX Underflow detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_TXOVR)
+		dev_err_ratelimited(dev, "block %d: TX Overflow detected\n", block);
+
+	if (pending & MCHP_ASRC_IR_LOCK) {
+		dev_dbg_ratelimited(dev, "block %d: DPLL locked detected\n", block);
+		/* Disable DPLL LOCK interrupt  */
+		regmap_update_bits(priv->regmap, MCHP_ASRC_IDR(block),
+				   MCHP_ASRC_IR_LOCK, MCHP_ASRC_IR_LOCK);
+
+		if (!priv->dsp[block].dma) {
+			dev_err_ratelimited(dev, "block %d: DSP locked but no PCM assigned\n",
+					    block);
+			return;
+		}
+
+		if (!priv->dsp[block].dma->unlocked_dsps)
+			return;
+		priv->dsp[block].dma->unlocked_dsps--;
+
+		/* DPLLs locked, start DMA transfers */
+		if (!priv->dsp[block].dma->unlocked_dsps) {
+			dev_dbg_ratelimited(dev, "block %d: DSPs ready, calling DMA handle\n",
+					    block);
+			tasklet_schedule(&priv->dsp[block].dma->start_handle);
+		} else {
+			dev_dbg_ratelimited(dev, "block %d: waiting for %d more DSPs to lock\n",
+					    block, priv->dsp[block].dma->unlocked_dsps);
+		}
+	}
+}
+
+static void mchp_asrc_block_interrupts(struct mchp_asrc_dev *priv, int block,
+				       irqreturn_t *ret)
+{
+	u32 isr, imr, pending;
+
+	regmap_read(priv->regmap, MCHP_ASRC_ISR(block), &isr);
+	regmap_read(priv->regmap, MCHP_ASRC_IMR(block), &imr);
+	dev_dbg_ratelimited(priv->dev, "IRQ handler: IMR %#x ISR %#x\n", imr, isr);
+
+	pending = isr & imr;
+	if (!pending)
+		return;
+
+	if (pending & MCHP_ASRC_IR_SECE) {
+		dev_err_ratelimited(priv->dev, "block %d: Security/Safety Event detected\n", block);
+		*ret = IRQ_HANDLED;
+	}
+
+	mchp_asrc_block_pending_intr(priv, pending, block);
+	*ret = IRQ_HANDLED;
+}
+
+static irqreturn_t mchp_asrc_interrupt(int irq, void *dev_id)
+{
+	struct mchp_asrc_dev *priv = dev_id;
+	irqreturn_t ret = IRQ_NONE;
+	int block;
+
+	for (block = 0; block < MCHP_ASRC_NB_STEREO_CH; block++)
+		mchp_asrc_block_interrupts(priv, block, &ret);
+
+	return ret;
+}
+
+static int mchp_asrc_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct mchp_asrc_dev *priv;
+	struct regmap *regmap;
+	void __iomem *base;
+	struct property *prop;
+	const __be32 *cur;
+	u32 pv;
+	u32 version;
+	int irq;
+	int err;
+	int count;
+	int i;
+
+	/* Get memory for driver data */
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	/* Map I/O registers */
+	base = devm_platform_get_and_ioremap_resource(pdev, 0, &priv->mem);
+	if (IS_ERR(base))
+		return PTR_ERR(base);
+
+	regmap = devm_regmap_init_mmio(&pdev->dev, base, &mchp_asrc_regmap_config);
+	if (IS_ERR(regmap)) {
+		dev_err(&pdev->dev, "failed to init regmap: %ld\n", PTR_ERR(regmap));
+		return PTR_ERR(regmap);
+	}
+	priv->dev = &pdev->dev;
+	priv->regmap = regmap;
+
+	/* Request IRQ */
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		dev_err(&pdev->dev, "failed to get IRQ no: %d\n", irq);
+		return irq;
+	}
+
+	err = devm_request_irq(&pdev->dev, irq, mchp_asrc_interrupt, 0, dev_name(&pdev->dev), priv);
+	if (err) {
+		dev_err(&pdev->dev, "failed to claim IRQ %d: %d\n", irq, err);
+		return err;
+	}
+
+	priv->pclk = devm_clk_get(&pdev->dev, "pclk");
+	if (IS_ERR(priv->pclk)) {
+		dev_err(&pdev->dev, "failed to get pclk clock: %ld\n", PTR_ERR(priv->pclk));
+		return PTR_ERR(priv->pclk);
+	}
+
+	priv->gclk = devm_clk_get(&pdev->dev, "gclk");
+	if (IS_ERR(priv->gclk)) {
+		dev_err(&pdev->dev, "failed to get gclk clock: %ld\n", PTR_ERR(priv->gclk));
+		return PTR_ERR(priv->gclk);
+	}
+
+	/* get the triggers list */
+	priv->trig_count = of_count_phandle_with_args(np, "microchip,triggers", NULL);
+	if (priv->trig_count < 0) {
+		dev_err(&pdev->dev, "failed to get microchip,triggers: %d\n",
+			priv->trig_count);
+		return priv->trig_count;
+	}
+	if (priv->trig_count == 0) {
+		dev_err(&pdev->dev, "no triggers found\n");
+		return -EINVAL;
+	}
+	dev_dbg(&pdev->dev, "found %d triggers:\n", priv->trig_count);
+	priv->trig = devm_kcalloc(&pdev->dev, priv->trig_count, sizeof(*priv->trig), GFP_KERNEL);
+	if (!priv->trig)
+		return -ENOMEM;
+
+	for (i = 0; i < priv->trig_count; i++) {
+		struct mchp_asrc_be_trigger *trig_be = &priv->trig[i];
+
+		trig_be->phandle = devm_kzalloc(&pdev->dev, sizeof(*trig_be->phandle), GFP_KERNEL);
+		if (!trig_be->phandle) {
+			err = -ENOMEM;
+			goto __cleanup_of_phandle_triggers;
+		}
+		err = of_parse_phandle_with_fixed_args(np, "microchip,triggers",
+						       0, i, trig_be->phandle);
+		if (err < 0) {
+			dev_err(&pdev->dev, "failed to get phandle for trigger %d: %d\n", i, err);
+			devm_kfree(&pdev->dev, trig_be->phandle);
+			trig_be->phandle = NULL;
+			continue;
+		}
+	}
+	count = 0;
+	of_property_for_each_u32(np, "microchip,trigger-indexes", prop, cur, pv) {
+		struct mchp_asrc_be_trigger *trig_be = &priv->trig[count];
+
+		if (pv >= MCHP_ASRC_TRIG_IDX_MAX_VAL) {
+			dev_err(&pdev->dev,
+				"error: microchip,trigger-indexes too big: %d\n",
+				pv);
+			err = -EINVAL;
+			goto __cleanup_of_phandle_triggers;
+		}
+
+		/* skip not found phandle */
+		if (!trig_be->phandle)
+			continue;
+
+		trig_be->idx = pv;
+		trig_be->priv = priv;
+		count++;
+		if (count > priv->trig_count) {
+			dev_err(&pdev->dev,
+				"Too many microchip,trigger-indexes: %d\n", count);
+			err = -EINVAL;
+			goto __cleanup_of_phandle_triggers;
+		}
+	}
+
+#ifdef DEBUG
+	dev_dbg(&pdev->dev, "Triggers %d:\n", count);
+	for (i = 0; i < count; i++) {
+		dev_dbg(&pdev->dev, "%s, index %d\n", priv->trig[i].phandle->np->full_name,
+			priv->trig[i].idx);
+	}
+#endif
+	priv->thr_opmode = -1;
+	priv->rhr_opmode = -1;
+
+	platform_set_drvdata(pdev, priv);
+
+	err = devm_snd_soc_register_component(&pdev->dev, &mchp_asrc_component, mchp_asrc_dai,
+					      ARRAY_SIZE(mchp_asrc_dai));
+	if (err) {
+		dev_err(&pdev->dev, "failed to register ASoC DAI: %d\n", err);
+		clk_disable_unprepare(priv->pclk);
+		goto __cleanup_of_phandle_triggers;
+	}
+
+	err = mchp_asrc_pcm_register(&pdev->dev);
+	if (err) {
+		dev_err(&pdev->dev, "failed to register ASoC platform\n");
+		goto __cleanup_of_phandle_triggers;
+	}
+
+	/* Enable the peripheral clock */
+	err = clk_prepare_enable(priv->pclk);
+	if (err) {
+		dev_err(&pdev->dev, "failed to enable the peripheral clock: %d\n", err);
+		goto __cleanup_of_phandle_triggers;
+	}
+
+	/* Software reset for all registers */
+	regmap_write(priv->regmap, MCHP_ASRC_CR, MCHP_ASRC_CR_SWRST);
+
+	/* Get IP version. */
+	regmap_read(priv->regmap, MCHP_ASRC_VERSION, &version);
+
+	dev_info(priv->dev, "hw version: %#lx\n", version & MCHP_ASRC_VERSION_MASK);
+
+	return 0;
+
+__cleanup_of_phandle_triggers:
+	for (i = 0; i < priv->trig_count; i++) {
+		struct mchp_asrc_be_trigger *trig_be = &priv->trig[i];
+
+		if (trig_be->phandle)
+			of_node_put(trig_be->phandle->np);
+	}
+	return err;
+}
+
+static int mchp_asrc_remove(struct platform_device *pdev)
+{
+	struct mchp_asrc_dev *priv = platform_get_drvdata(pdev);
+	int i;
+
+	for (i = 0; i < priv->trig_count; i++) {
+		struct mchp_asrc_be_trigger *trig_be = &priv->trig[i];
+
+		if (trig_be->phandle)
+			of_node_put(trig_be->phandle->np);
+	}
+	clk_disable_unprepare(priv->pclk);
+
+	return 0;
+}
+
+static const struct of_device_id mchp_asrc_dt_ids[] = {
+	{
+		.compatible = "microchip,sama7g5-asrc",
+	},
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, mchp_asrc_dt_ids);
+
+static struct platform_driver mchp_asrc_driver = {
+	.driver		= {
+		.name	= "mchp_asrc",
+		.of_match_table	= of_match_ptr(mchp_asrc_dt_ids),
+	},
+	.probe		= mchp_asrc_probe,
+	.remove		= mchp_asrc_remove,
+};
+module_platform_driver(mchp_asrc_driver);
+
+MODULE_DESCRIPTION("Microchip Asynchronous Sample Rate Converter (ASRC) driver");
+MODULE_AUTHOR("Codrin Ciubotariu <codrin.ciubotariu@microchip.com>");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/atmel/mchp-asrc.h b/sound/soc/atmel/mchp-asrc.h
new file mode 100644
index 000000000000..fc93298737b7
--- /dev/null
+++ b/sound/soc/atmel/mchp-asrc.h
@@ -0,0 +1,32 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+// ASoC Platform header file for Microchip ASRC
+//
+// Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries
+//
+// Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
+
+#ifndef __MCHP_ASRC_H
+#define __MCHP_ASRC_H
+
+#include <sound/soc.h>
+#include <sound/dmaengine_pcm.h>
+
+#define MCHP_ASRC_NB_CHANNELS		8
+#define MCHP_ASRC_NB_STEREO_CH		((MCHP_ASRC_NB_CHANNELS) / 2)
+
+struct mchp_asrc_dmaengine_be_dma {
+	struct of_phandle_args *phandle;
+	struct snd_dmaengine_dai_dma_data dma_data;
+	struct list_head list;
+};
+
+struct mchp_asrc_dmaengine_dai_dma {
+	struct list_head dma_in_list;
+	struct list_head dma_out_list;
+	struct tasklet_struct start_handle;
+	int unlocked_dsps;
+};
+
+int mchp_asrc_pcm_register(struct device *dev);
+
+#endif	/* __MCHP_ASRC_H */
-- 
2.34.1

