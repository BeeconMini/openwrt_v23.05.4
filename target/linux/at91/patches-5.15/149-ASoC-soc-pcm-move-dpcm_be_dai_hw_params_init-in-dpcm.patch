From 0b9d13538373a2fb3240c7c2dfdac6d05333985a Mon Sep 17 00:00:00 2001
From: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
Date: Fri, 10 Sep 2021 18:46:07 +0300
Subject: [PATCH 040/471] ASoC: soc-pcm: move dpcm_be_dai_hw_params_init() in
 dpcm_be_dai_hw_params

This allows the usage of dpcm_be_dai_hw_params_init() in
dpcm_run_update_startup(). This way, hw_params can be initialized when
routes are updated and new audio routes are created.

Signed-off-by: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
---
 sound/soc/soc-pcm.c | 77 ++++++++++++++++++++++-----------------------
 1 file changed, 38 insertions(+), 39 deletions(-)

diff --git a/sound/soc/soc-pcm.c b/sound/soc/soc-pcm.c
index 648fd9d6d7b8..9b98bc68c015 100644
--- a/sound/soc/soc-pcm.c
+++ b/sound/soc/soc-pcm.c
@@ -1881,6 +1881,41 @@ static int dpcm_fe_dai_hw_free(struct snd_pcm_substream *substream)
 	return 0;
 }
 
+static int dpcm_be_dai_hw_params_init(struct snd_soc_pcm_runtime *fe, int stream)
+{
+	struct snd_pcm_hw_params *params = &fe->dpcm[stream].hw_params;
+	int k;
+
+	for (k = SNDRV_PCM_HW_PARAM_FIRST_MASK;
+	     k <= SNDRV_PCM_HW_PARAM_LAST_MASK; k++)
+		snd_mask_any(hw_param_mask(params, k));
+
+	for (k = SNDRV_PCM_HW_PARAM_FIRST_INTERVAL;
+	     k <= SNDRV_PCM_HW_PARAM_LAST_INTERVAL; k++)
+		snd_interval_any(hw_param_interval(params, k));
+
+	if (fe->dai_link->dpcm_merged_format) {
+		memcpy(hw_param_interval(&fe->dpcm[stream].hw_params,
+					 SNDRV_PCM_HW_PARAM_FORMAT),
+		       hw_param_interval(params, SNDRV_PCM_HW_PARAM_FORMAT),
+		       sizeof(struct snd_interval));
+	}
+	if (fe->dai_link->dpcm_merged_chan) {
+		memcpy(hw_param_interval(&fe->dpcm[stream].hw_params,
+					 SNDRV_PCM_HW_PARAM_CHANNELS),
+		       hw_param_interval(params, SNDRV_PCM_HW_PARAM_CHANNELS),
+		       sizeof(struct snd_interval));
+	}
+	if (fe->dai_link->dpcm_merged_rate) {
+		memcpy(hw_param_interval(&fe->dpcm[stream].hw_params,
+					 SNDRV_PCM_HW_PARAM_RATE),
+		       hw_param_interval(params, SNDRV_PCM_HW_PARAM_RATE),
+		       sizeof(struct snd_interval));
+	}
+
+	return 0;
+}
+
 int dpcm_be_dai_hw_params(struct snd_soc_pcm_runtime *fe, int stream)
 {
 	struct snd_soc_pcm_runtime *be;
@@ -1888,6 +1923,9 @@ int dpcm_be_dai_hw_params(struct snd_soc_pcm_runtime *fe, int stream)
 	struct snd_soc_dpcm *dpcm;
 	int ret;
 
+	/* initialize the BE HW params */
+	dpcm_be_dai_hw_params_init(fe, stream);
+
 	for_each_dpcm_be(fe, stream, dpcm) {
 		be = dpcm->be;
 		be_substream = snd_soc_dpcm_get_substream(be, stream);
@@ -1971,54 +2009,15 @@ int dpcm_be_dai_hw_params(struct snd_soc_pcm_runtime *fe, int stream)
 	return ret;
 }
 
-static int dpcm_be_dai_hw_params_init(struct snd_soc_pcm_runtime *fe, int stream)
-{
-	struct snd_pcm_hw_params *params = &fe->dpcm[stream].hw_params;
-	int k;
-
-	for (k = SNDRV_PCM_HW_PARAM_FIRST_MASK;
-	     k <= SNDRV_PCM_HW_PARAM_LAST_MASK; k++)
-		snd_mask_any(hw_param_mask(params, k));
-
-	for (k = SNDRV_PCM_HW_PARAM_FIRST_INTERVAL;
-	     k <= SNDRV_PCM_HW_PARAM_LAST_INTERVAL; k++)
-		snd_interval_any(hw_param_interval(params, k));
-
-	return 0;
-}
-
 static int dpcm_fe_dai_hw_params(struct snd_pcm_substream *substream,
 				 struct snd_pcm_hw_params *params)
 {
 	struct snd_soc_pcm_runtime *fe = asoc_substream_to_rtd(substream);
 	int ret, stream = substream->stream;
-	struct snd_interval *t, *dpcm_t;
 
 	mutex_lock_nested(&fe->card->mutex, SND_SOC_CARD_CLASS_RUNTIME);
 	dpcm_set_fe_update_state(fe, stream, SND_SOC_DPCM_UPDATE_FE);
 
-	/* initialize the BE HW params */
-	dpcm_be_dai_hw_params_init(fe, stream);
-
-	if (fe->dai_link->dpcm_merged_format) {
-		memcpy(hw_param_interval(&fe->dpcm[stream].hw_params,
-					 SNDRV_PCM_HW_PARAM_FORMAT),
-		       hw_param_interval(params, SNDRV_PCM_HW_PARAM_FORMAT),
-		       sizeof(struct snd_interval));
-	}
-	if (fe->dai_link->dpcm_merged_chan) {
-		memcpy(hw_param_interval(&fe->dpcm[stream].hw_params,
-					 SNDRV_PCM_HW_PARAM_CHANNELS),
-		       hw_param_interval(params, SNDRV_PCM_HW_PARAM_CHANNELS),
-		       sizeof(struct snd_interval));
-	}
-	if (fe->dai_link->dpcm_merged_rate) {
-		memcpy(hw_param_interval(&fe->dpcm[stream].hw_params,
-					 SNDRV_PCM_HW_PARAM_RATE),
-		       hw_param_interval(params, SNDRV_PCM_HW_PARAM_RATE),
-		       sizeof(struct snd_interval));
-	}
-
 	ret = dpcm_be_dai_hw_params(fe, stream);
 	if (ret < 0)
 		goto out;
-- 
2.34.1

