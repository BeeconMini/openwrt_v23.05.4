--- a/drivers/gpio/gpio-ath79.c
+++ b/drivers/gpio/gpio-ath79.c
@@ -14,17 +14,7 @@
 #include <linux/interrupt.h>
 #include <linux/module.h>
 #include <linux/irq.h>
-
-#define AR71XX_GPIO_REG_OE		0x00
-#define AR71XX_GPIO_REG_IN		0x04
-#define AR71XX_GPIO_REG_SET		0x0c
-#define AR71XX_GPIO_REG_CLEAR		0x10
-
-#define AR71XX_GPIO_REG_INT_ENABLE	0x14
-#define AR71XX_GPIO_REG_INT_TYPE	0x18
-#define AR71XX_GPIO_REG_INT_POLARITY	0x1c
-#define AR71XX_GPIO_REG_INT_PENDING	0x20
-#define AR71XX_GPIO_REG_INT_MASK	0x24
+#include <asm/mach-ath79/ar71xx_regs.h>
 
 struct ath79_gpio_ctrl {
 	struct gpio_chip gc;
@@ -230,6 +220,8 @@
 	u32 ath79_gpio_count;
 	bool oe_inverted;
 	int err;
+	u32 gpio_mask;
+	u32 gpio;
 
 	ctrl = devm_kzalloc(dev, sizeof(*ctrl), GFP_KERNEL);
 	if (!ctrl)
@@ -263,6 +255,24 @@
 	if (!ctrl->base)
 		return -ENOMEM;
 
+	of_property_read_u32(np, "mask", &gpio_mask);
+	if (gpio_mask != 0) {
+		for (gpio = 0; gpio < 32; gpio++) {
+			if (1 << gpio & gpio_mask) {
+				unsigned int reg = AR934X_GPIO_REG_OUT_FUNC0 + 4 * (gpio / 4);
+				u32 t, s = 8 * (gpio % 4);
+
+				t = readl(ctrl->base + reg);
+				t &= ~(0xff << s);
+				t |= AR934X_GPIO_OUT_GPIO << s;
+				writel(t, ctrl->base + reg);
+
+				/* flush write */
+				(void) readl(ctrl->base + reg);
+			}
+		}
+	}
+
 	raw_spin_lock_init(&ctrl->lock);
 	err = bgpio_init(&ctrl->gc, dev, 4,
 			ctrl->base + AR71XX_GPIO_REG_IN,
