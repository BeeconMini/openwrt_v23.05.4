/*
 * This files contains the source of the Realtek firmware for RTL839x
 * SOCs. For testing purposes it can be included into the development
 * tree. Usually this file will be converted to a binary that is included
 * into the OpenWrt image. To create a new binary just issue:
 *
 * scripts/build_realtek_firmare.py rtl839x_phy.h rtl839x_phy.fw
 *
 * If you want to add new structures of the same type feel free but
 * remember to create the binary afterwards. If you want to adapt the
 * structures of this file the script and the driver coding must be
 * changed accordingly.
 */

struct __attribute__ ((__packed__)) fw_data {
    int16_t port;
    uint16_t reg;
    uint16_t val;
    uint16_t mask;
};

struct __attribute__ ((__packed__)) fw_sequence {
        uint16_t portstart;
        uint16_t portend;
        struct fw_data data[];
};

struct rtph_fw_seq rtph_fw_8218b_6276a_perchip = {
	0 ,  0,
	{
	/* Serdes */
	{ 0, 0x1e, 0x0008, 0xffff },
	/* set bit 3 to switch Serdes 0 from 20 to 40 bit (default = 0x8e4) */
	{ 0, 0x1f, 0x0405, 0xffff },
	{ 0, 0x14, 0x08ec, 0xffff },
	/* Serdes 0 RXCLKWR change to neg edge */
	{ 0, 0x1f, 0x0404, 0xffff },
	{ 0, 0x17, 0x5359, 0xffff },
	/* Serdes 1 RXCLKWR change to neg edge */
	{ 0, 0x1f, 0x0424, 0xffff },
	{ 0, 0x17, 0x5359, 0xffff },
	/* Analog frontend (AFE) patch */
	{ 0, 0x1f, 0x042c, 0xffff },
	{ 0, 0x11, 0x4000, 0xffff },
	/* Serdes 1 KI=0, KP=3 */
	{ 0, 0x12, 0x2020, 0xffff },
	{ 0, 0x1f, 0x042D, 0xffff },
	{ 0, 0x11, 0xC014, 0xffff },
	/* Rsel = 10G/FF, kp1_1 = 2 */
	{ 0, 0x1f, 0x0464, 0xffff },
	{ 0, 0x15, 0x202a, 0xffff },
	/* configure VGA=0x3 */
	{ 0, 0x12, 0x1fe0, 0xffff },
	{ 0, 0x1f, 0x042e, 0xffff },
	{ 0, 0x11, 0x218f, 0xffff },
	/* Turn off ring PLL */
	{ 0, 0x1f, 0x044c, 0xffff },
	{ 0, 0x11, 0x4000, 0xffff },
	{ 0, 0x1f, 0x0460, 0xffff },
	{ 0, 0x10, 0x4800, 0xffff },
	{ 0, 0x1f, 0x0462, 0xffff },
	{ 0, 0x12, 0x96b3, 0xffff },
	/*enable cmu lbw for Icp */
	{ 0, 0x15, 0x6e58, 0xffff },
	{ 0, 0x1f, 0x0464, 0xffff },
	{ 0, 0x13, 0x3def, 0xffff },
	{ 0, 0x16, 0xf072, 0xffff },
	{ 0, 0x1f, 0x0465, 0xffff },
	{ 0, 0x10, 0x4208, 0xffff },
	{ 0, 0x11, 0x3a08, 0xffff },
	{ 0, 0x12, 0x4007, 0xffff },
	{ 0, 0x1f, 0x0464, 0xffff },
	{ 0, 0x17, 0x84f5, 0xffff },
	{ 0, 0x17, 0x04f5, 0xffff },
	{ 0, 0x1e, 0x0008, 0xffff },
	/* 15-11:filter_0, 10-7:1=force, 0=calib */
	{ 0, 0x1f, 0x0464, 0xffff },
	{ 0, 0x12, 0x1800, 0xf800 },
	{ 0, 0x12, 0x0780, 0x0780 },
	/* 14-10:filter_3, 9-5:filter_2, 4-0:filter_1 */
	{ 0, 0x1f, 0x0464, 0xffff },
	{ 0, 0x13, 0x3c00, 0x7c00 },
	{ 0, 0x13, 0x0220, 0x03e0 },
	{ 0, 0x13, 0x0010, 0x001f },
	/* enable offset calibration */
	{ 0, 0x1f, 0x0462, 0xffff },
	{ 0, 0x10, 0x3000, 0x3000 },
	/* disable Serdes 0 and Serdes 1 impedance auto-calibration */
	{ 0, 0x1f, 0x0462, 0xffff },
	{ 0, 0x13, 0x5108, 0xffff },
	/* cmu reset */
	{ 0, 0x1f, 0x0467, 0xffff },
	{ 0, 0x14, 0x143d, 0xffff },
	{ 0, 0x14, 0x3c15, 0xffff },
	{ 0, 0x14, 0x3c17, 0xffff },
	{ 0, 0x14, 0x0000, 0xffff },
	/* digital soft reset */
	{ 0, 0x1f, 0x0404, 0xffff },
	{ 0, 0x13, 0x7146, 0xffff },
	{ 0, 0x13, 0x7106, 0xffff },
	/* toggle bit 0 for Serdes 1 ana reset */
	{ 0, 0x1f, 0x042D, 0xffff },
	{ 0, 0x11, 0xC015, 0xffff },
	{ 0, 0x11, 0xC014, 0xffff },
	/* disable Serdes 0 re-nway */
	{ 0, 0x1f, 0x0404, 0xffff },
	{ 0, 0x10, 0x9703, 0xffff },
	/* disable Serdes 1 re-nway */
	{ 0, 0x1f, 0x0424, 0xffff },
	{ 0, 0x10, 0x9403, 0xffff },
	{ 0, 0x1e, 0x0000, 0xffff },
	/* Global LED Timing Setting */
	{ 0, 0x1e, 0x0008, 0xffff },
	{ 0, 0x1f, 0x0280, 0xffff },
	{ 0, 0x10, 0xF0BB, 0xffff },
	{ 0, 0x1e, 0x0000, 0xffff },
	{ 0, 0x1e, 0x0008, 0xffff },
	/* Serdes 0 force QSGMII */
	{ 0, 0x1f, 0x0404, 0xffff },
	{ 0, 0x14, 0xd749, 0xffff },
	/* Serdes 1 force QSGMII */
	{ 0, 0x1f, 0x0424, 0xffff },
	{ 0, 0x14, 0xd749, 0xffff },
	{ 0, 0x1e, 0x0000, 0xffff },
	{-1, 0, 0, 0 },
	}
};

struct rtph_fw_seq rtph_fw_8218b_6276a_perport = {
	0, 7,
	{
	{ 0, 0x1f, 0x0a5d, 0xffff },
	{ 0, 0x10, 0x0000, 0xffff },
	{ 0, 0x1f, 0x0000, 0xffff },
	{ 0, 0x1e, 0x0001, 0xffff },
	{ 0, 0x1f, 0x0bc0, 0xffff },
	{ 0, 0x16, 0x0c00, 0xffff },
	{ 0, 0x1e, 0x0001, 0xffff },
	{ 0, 0x1f, 0x0a43, 0xffff },
	{ 0, 0x11, 0x0043, 0xffff },
	/* 1000M green short cable change viterbi from partial viterbi to full viterbi */
	{ 0, 0x13, 0x809f, 0xffff },
	{ 0, 0x14, 0x6b20, 0xffff },
	{ 0, 0x1b, 0x809a, 0xffff },
	{ 0, 0x1c, 0x8933, 0xffff },
	{ 0, 0x1e, 0x0000, 0xffff },
	/* chip version 6276B ESD per port, might not be needed */
	{ 0, 0x1f, 0x0bc4, 0xffff },
	{ 0, 0x17, 0xa200, 0xffff },
	{-1, 0, 0, 0 },
	}
};

struct rtph_fw_seq rtph_fw_8218b_6276c_ipd_perport = {
	0, 7,
	{
	{ 0, 0x1f, 0x0a43, 0xffff },
	{ 0, 0x13, 0x8012, 0xffff },
	{ 0, 0x14, 0xffff, 0xffff },
	{ 0, 0x13, 0x81bd, 0xffff },
	{ 0, 0x14, 0x2801, 0xffff },
	{ 0, 0x13, 0x827b, 0xffff },
	{ 0, 0x14, 0x0000, 0xffff },
	{ 0, 0x13, 0x809a, 0xffff },
	{ 0, 0x14, 0xa444, 0xffff },
	{ 0, 0x13, 0x80a3, 0xffff },
	{ 0, 0x14, 0xa444, 0xffff },
	{ 0, 0x13, 0x80a9, 0xffff },
	{ 0, 0x14, 0x2400, 0xffff },
	{ 0, 0x13, 0x80b2, 0xffff },
	{ 0, 0x14, 0x2400, 0xffff },
	{ 0, 0x13, 0x8100, 0xffff },
	{ 0, 0x14, 0xe91e, 0xffff },
	{ 0, 0x13, 0x811f, 0xffff },
	{ 0, 0x14, 0xe90e, 0xffff },
	{-1, 0, 0, 0 },
	}
};

struct rtph_fw_seq rtph_fw_8218b_6276c_ipd_perchip = {
	0, 0,
	{
	{ 3, 0x1f, 0x0bc4, 0xffff },
	{ 3, 0x17, 0xb200, 0xffff },
	{ 0, 0x1f, 0x0a42, 0xffff },
	{ 0, 0x16, 0x0f91, 0xffff },
	{ 1, 0x1f, 0x0a42, 0xffff },
	{ 1, 0x16, 0x0fd1, 0xffff },
	{ 2, 0x1f, 0x0a42, 0xffff },
	{ 2, 0x16, 0x0fd1, 0xffff },
	{ 3, 0x1f, 0x0a42, 0xffff },
	{ 3, 0x16, 0x0f51, 0xffff },
	{ 4, 0x1f, 0x0a42, 0xffff },
	{ 4, 0x16, 0x0f91, 0xffff },
	{ 5, 0x1f, 0x0a42, 0xffff },
	{ 5, 0x16, 0x0fd1, 0xffff },
	{ 6, 0x1f, 0x0a42, 0xffff },
	{ 6, 0x16, 0x0fd1, 0xffff },
	{ 7, 0x1f, 0x0a42, 0xffff },
	{ 7, 0x16, 0x0f51, 0xffff },
	{-1, 0, 0, 0 },
	}
};

struct rtph_fw_seq rtph_fw_8218b_6276_patch = {
	0, 7,
	{
	{ 0, 0x1b, 0xb82e, 0xffff },
	{ 0, 0x1c, 0x0001, 0xffff },
	{ 0, 0x1b, 0xB820, 0xffff },
	{ 0, 0x1c, 0x0090, 0xffff },
	{ 0, 0x1b, 0xA012, 0xffff },
	{ 0, 0x1c, 0x0000, 0xffff },
	{ 0, 0x1b, 0xA014, 0xffff },
	{ 0, 0x1c, 0x2c04, 0xffff },
	{ 0, 0x1c, 0x2c10, 0xffff },
	{ 0, 0x1c, 0x2c1a, 0xffff },
	{ 0, 0x1c, 0x2c1e, 0xffff },
	{ 0, 0x1c, 0x1c1e, 0xffff },
	{ 0, 0x1c, 0xc441, 0xffff },
	{ 0, 0x1c, 0xdb00, 0xffff },
	{ 0, 0x1c, 0x862e, 0xffff },
	{ 0, 0x1c, 0xe003, 0xffff },
	{ 0, 0x1c, 0x0b02, 0xffff },
	{ 0, 0x1c, 0x1610, 0xffff },
	{ 0, 0x1c, 0xc040, 0xffff },
	{ 0, 0x1c, 0xd701, 0xffff },
	{ 0, 0x1c, 0xc0c0, 0xffff },
	{ 0, 0x1c, 0xc501, 0xffff },
	{ 0, 0x1c, 0x2162, 0xffff },
	{ 0, 0x1c, 0xd603, 0xffff },
	{ 0, 0x1c, 0xd60c, 0xffff },
	{ 0, 0x1c, 0xd610, 0xffff },
	{ 0, 0x1c, 0xd61c, 0xffff },
	{ 0, 0x1c, 0xd624, 0xffff },
	{ 0, 0x1c, 0xd62c, 0xffff },
	{ 0, 0x1c, 0xd634, 0xffff },
	{ 0, 0x1c, 0xd63c, 0xffff },
	{ 0, 0x1c, 0xa520, 0xffff },
	{ 0, 0x1c, 0x254c, 0xffff },
	{ 0, 0x1c, 0x1610, 0xffff },
	{ 0, 0x1c, 0x15b3, 0xffff },
	{ 0, 0x1c, 0xcc00, 0xffff },
	{ 0, 0x1c, 0x201a, 0xffff },
	{ 0, 0x1c, 0xd603, 0xffff },
	{ 0, 0x1c, 0xd608, 0xffff },
	{ 0, 0x1c, 0xd610, 0xffff },
	{ 0, 0x1c, 0xd61c, 0xffff },
	{ 0, 0x1c, 0xd624, 0xffff },
	{ 0, 0x1c, 0xd62c, 0xffff },
	{ 0, 0x1c, 0xd634, 0xffff },
	{ 0, 0x1c, 0xd63c, 0xffff },
	{ 0, 0x1c, 0x0800, 0xffff },
	{ 0, 0x1b, 0xA01A, 0xffff },
	{ 0, 0x1c, 0x0000, 0xffff },
	{ 0, 0x1b, 0xA006, 0xffff },
	{ 0, 0x1c, 0x01ad, 0xffff },
	{ 0, 0x1b, 0xA004, 0xffff },
	{ 0, 0x1c, 0x0019, 0xffff },
	{ 0, 0x1b, 0xA002, 0xffff },
	{ 0, 0x1c, 0x054b, 0xffff },
	{ 0, 0x1b, 0xA000, 0xffff },
	{ 0, 0x1c, 0x7159, 0xffff },
	{ 0, 0x1b, 0xB820, 0xffff },
	{ 0, 0x1c, 0x0010, 0xffff },
	{ 0, 0x1b, 0x0000, 0xffff },
	{ 0, 0x1c, 0x0000, 0xffff },
	{ 0, 0x1f, 0x0b82, 0xffff },
	{ 0, 0x17, 0x0000, 0xffff },
	{ 0, 0x1f, 0x0000, 0xffff },
	{ 0, 0x1b, 0x8146, 0xffff },
	{ 0, 0x1c, 0x0000, 0xffff },
	{ 0, 0x1f, 0x0b82, 0xffff },
	{ 0, 0x10, 0x0000, 0x0010 },
	{ 0, 0x1f, 0x0000, 0xffff },
	{-1, 0, 0, 0 },
	}
};
